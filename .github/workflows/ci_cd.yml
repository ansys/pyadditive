name: GitHub CI
on:
  pull_request:
  merge_group:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

permissions:
  contents: write # zizmor: ignore[excessive-permissions]
  packages: read

env:
  MAIN_PYTHON_VERSION: "3.12"
  DOCUMENTATION_CNAME: "additive.docs.pyansys.com"
  LIBRARY_NAME: "ansys-additive-core"
  # NOTE: The server needs to stay in a private registry.
  ANSYS_PRODUCT_IMAGE: "ghcr.io/ansys-internal/additive:latest"
  ANSYS_PRODUCT_CONTAINER: "ansys-additive-container"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  actions-security:
    name: "Check actions security"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-actions-security@v10.0
        with:
          generate-summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          auditing-level: 'high'
          trust-ansys-actions: true

  code-style:
    name: "Running code style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: ansys/actions/code-style@v10

  doc-style:
    name: "Running documentation style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@v10
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  check-vulnerabilities:
    name: "Check library vulnerabilities"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/check-vulnerabilities@v10.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-package-name: ${{ env.LIBRARY_NAME }}
          dev-mode: ${{ github.ref != 'refs/heads/main' }}

  smoke-tests:
    name: "Build wheelhouse for Python versions"
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: "Build a wheelhouse of the Python library"
        uses: ansys/actions/build-wheelhouse@v10
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Testing library with different operating systems and Python versions"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: "Run pytest"
        uses: ansys/actions/tests-pytest@v10
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upload Coverage Results
        if: (matrix.python-version == env.MAIN_PYTHON_VERSION) && (runner.os == 'Linux')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7
        if: (matrix.python-version == env.MAIN_PYTHON_VERSION) && (runner.os == 'Linux')
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml

  doc-build:
    name: "Building library documentation"
    # This is dumb but the schema checker doesn't allow the runner name
    # `public-ubuntu-latest-8-cores`. Circumvent this by using a matrix
    # strategy.
    strategy:
      matrix:
        runner: [public-ubuntu-latest-8-cores]
    runs-on: ${{ matrix.runner }}
    needs: [doc-style]
    timeout-minutes: 90
    steps:
      - name: "Login into the GitHub registry container"
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Download the Docker image for Ansys Additive"  # zizmor: ignore[template-injection]
        run: |  # zizmor: ignore[template-injection]
          docker pull ${{ env.ANSYS_PRODUCT_IMAGE }}

      - name: "Start product server" # zizmor: ignore[template-injection]
        # Don't use --rm flag. The container is removed in a later step
        # after collecting the logs.
        run: | 
          docker run --detach \
            --name ${{ env.ANSYS_PRODUCT_CONTAINER }} \
            -e ANSYSLMD_LICENSE_FILE=1055@${{ env.LICENSE_SERVER }} \
            -p 50052:50052 \
            ${{ env.ANSYS_PRODUCT_IMAGE }}
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}

      - name: "Setup headless display"
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19

      - name: "Checkout code"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: "Build documentation with short examples"
        if: github.event_name != 'push'
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          checkout: false
          sphinxopts: "-j auto"
          dependencies: "pandoc"
        env:
          GENERATING_DOCS: 1
          ANSYS_ADDITIVE_ADDRESS: "localhost:50052"
          BUILD_EXAMPLES_LONG: false

      - name: "Build documentation with long examples"
        if: github.event_name == 'push'
        uses: ansys/actions/doc-build@v10
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          checkout: false
          sphinxopts: "-j auto"
          dependencies: "pandoc"
        env:
          GENERATING_DOCS: 1
          ANSYS_ADDITIVE_ADDRESS: "localhost:50052"

      - name: "Collect logs and shutdown server"
        if: ${{ always() }}
        run: |  # zizmor: ignore[template-injection]
          docker stop ${{ env.ANSYS_PRODUCT_CONTAINER }}
          docker logs ${{ env.ANSYS_PRODUCT_CONTAINER }} >> docker-logs.txt
          docker rm ${{ env.ANSYS_PRODUCT_CONTAINER }}

      - name: "Upload container logs as artifacts"
        if: ${{ always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: docker-logs.txt
          path: docker-logs.txt

  build-library:
    name: "Build library artifacts"
    needs: [tests, doc-build]
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v10
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library]
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: "Download the library artifacts from build-library step"
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ env.LIBRARY_NAME }}-artifacts
          path: ${{ env.LIBRARY_NAME }}-artifacts

      - name: "Upload artifacts to PyPI using trusted publisher"
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
        with:
          repository-url: "https://upload.pypi.org/legacy/"
          print-hash: true
          packages-dir: ${{ env.LIBRARY_NAME }}-artifacts
          skip-existing: false

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v10
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_dev_docs:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    needs: [build-library]
    if: github.event_name == 'push'
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  upload_docs_release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v10
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  automerge-prs:
    name: Automerge PRs (dependabot and pre-commit.ci only)
    runs-on: ubuntu-latest
    needs: [build-library]
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Automerge PRs
        uses: ansys/actions/hk-automerge-prs@v10
        with:
          approver: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          approver-token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
