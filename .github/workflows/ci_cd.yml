name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: "3.10"
  DOCUMENTATION_CNAME: "additive.docs.pyansys.com"
  LIBRARY_NAME: "ansys-additive"
  LIBRARY_NAMESPACE: "ansys.additive"
  ANSYS_PRODUCT_IMAGE: "ghcr.io/pyansys/additive:latest"
  ANSYS_PRODUCT_CONTAINER: "ansys-additive-container"

  PYANSYS_PYPI_PRIVATE_PAT: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
  PIP_INDEX_URL: "https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-style:
    name: "Running code style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: pyansys/actions/code-style@v4

  doc-style:
    name: "Running documentation style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: pyansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: "Build wheelhouse for Python versions"
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # python-version: ["3.8", "3.9", "3.10", "3.11"]
        python-version: ["3.10"]
    steps:
      - name: "Build a wheelhouse of the Python library"
        uses: pyansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          library-namespace: ${{ env.LIBRARY_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Testing library with different operating systems and Python versions"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: false
    steps:
      - name: "Run pytest"
        uses: pyansys/actions/tests-pytest@v4
        with:
          pytest-extra-args: "--cov=${{ env.LIBRARY_NAMESPACE }} --cov-report=term --cov-report=html:.cov/html"

  doc-build:
    name: "Building library documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - name: "Install system dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install pandoc

      - name: "Login into the GitHub registry container"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Download the Docker image for Ansys Additive"
        run: |
          docker pull ${{ env.ANSYS_PRODUCT_IMAGE }}

      - name: "Start product server"
        run: |
          docker run --detach \
            --name ${{ env.ANSYS_PRODUCT_CONTAINER }} \
            -e ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }} \
            -p 50052:50052 \
            ${{ env.ANSYS_PRODUCT_IMAGE }}

      - name: "Setup headless display"
        uses: pyvista/setup-headless-display-action@v2

      - name: "Run Ansys documentation building action"
        uses: pyansys/actions/doc-build@v4
        env:
          GENERATING_DOCS: 1
          ANSYS_ADDITIVE_ADDRESS: "localhost:50052"

      - name: "Collect logs and shutdown server"
        if: ${{ always() }}
        run: |
          docker stop ${{ env.ANSYS_PRODUCT_CONTAINER }}
          docker logs ${{ env.ANSYS_PRODUCT_CONTAINER }} >> docker-logs.txt
          docker rm ${{ env.ANSYS_PRODUCT_CONTAINER }}

      - name: "Upload container logs as artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs.txt
          path: docker-logs.txt

  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    needs: doc-build
    if: github.event_name == 'push'
    steps:
      - name: "Deploy the latest documentation"
        uses: pyansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build-library:
    name: "Build library artifacts"
    needs: [tests, doc-deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: pyansys/actions/build-library@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library]
    runs-on: ubuntu-latest
    steps:
      - name: "Release to the private PyPI repository"
        uses: pyansys/actions/release-pypi-private@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to GitHub"
        uses: pyansys/actions/release-github@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  upload_docs_release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: pyansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
