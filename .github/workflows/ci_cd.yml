name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: "3.10"
  DOCUMENTATION_CNAME: "additive.docs.pyansys.com"
  LIBRARY_NAME: "ansys-additive"
  LIBRARY_NAMESPACE: "ansys.additive"
  PYANSYS_PYPI_PRIVATE_PAT: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
  PIP_INDEX_URL: "https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-style:
    name: "Running code style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: pyansys/actions/code-style@v2

  doc-style:
    name: "Running documentation style checks"
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: pyansys/actions/doc-style@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - name: "Build a wheelhouse of the Python library"
        uses: pyansys/actions/build-wheelhouse@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          library-namespace: ${{ env.LIBRARY_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Testing library with different operating systems and Python versions"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
      fail-fast: false
    steps:
      - name: "Run pytest"
        uses: pyansys/actions/tests-pytest@v2
        with:
          pytest-extra-args: "--cov=${{ env.LIBRARY_NAMESPACE }} --cov-report=term --cov-report=html:.cov/html"

  doc-build:
    name: "Building library documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - name: "Run Ansys documentation building action"
        uses: pyansys/actions/doc-build@v2

  doc-deploy-dev:
    name: "Deploy developers documentation"
    runs-on: ubuntu-latest
    needs: doc-build
    if: github.event_name == 'push'
    steps:
      - name: "Deploy the latest documentation"
        uses: pyansys/actions/doc-deploy-dev@v2
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build-library:
    name: "Build library artifacts"
    needs: [tests, doc-deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: pyansys/actions/build-library@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: "Release project"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library]
    runs-on: ubuntu-latest
    steps:
      - name: "Release to the private PyPI repository"
        uses: pyansys/actions/release-pypi-private@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to GitHub"
        uses: pyansys/actions/release-github@v2
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  upload_docs_release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: pyansys/actions/doc-deploy-stable@v2
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
