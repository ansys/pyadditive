[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
# Check https://flit.readthedocs.io/en/latest/pyproject_toml.html for all available sections
name = "ansys-additive-core"
version = "0.19.0b24"
description = "A Python client for the Ansys Additive service"
readme = "README.rst"
requires-python = ">=3.10,<4"
license = { file = "LICENSE" }
authors = [{ name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" }]
maintainers = [{ name = "ANSYS, Inc.", email = "pyansys.core@ansys.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Manufacturing",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "ansys-api-additive==2.2.0",
    "ansys-platform-instancemanagement>=1.1.1",
    "dill>=0.3.7",
    "google-api-python-client>=1.7.11",
    "googleapis-common-protos>=1.52.0",
    "grpcio>=1.35.0",
    "grpcio-health-checking>=1.45.0",
    "importlib-metadata>=4.0",
    "numpy>=1.20.3",
    "pandas>=2.2.2",
    "platformdirs>=3.8.0",
    "protobuf>=3.20.2,<6",
    "six>=1.16.0",
    "tqdm>=4.45.0",
    "pydantic>=2.6.3",
    "ipython>=7.0.0",
]

[project.optional-dependencies]
tests = [
    "ansys-platform-instancemanagement==1.1.2",
    "dill==0.3.9",
    "google-api-python-client==2.147.0",
    "googleapis-common-protos==1.65.0",
    "grpcio==1.60.0",
    "grpcio-health-checking==1.48.2",
    "numpy==2.1.1",
    "pandas==2.2.3",
    "platformdirs==4.3.6",
    "protobuf==5.28.2",
    "six==1.16.0",
    "tqdm==4.66.5",
    "pydantic==2.9.2",
    "pytest==8.3.3",
    "pytest-cov==5.0.0",
]

doc = [
    "ansys-sphinx-theme[autoapi]==1.1.2",
    "enum-tools==0.12.0",
    "jupyter_sphinx==0.5.3",
    "matplotlib==3.9.2",
    "numpydoc==1.8.0",
    "phantomjs==1.4.1",
    "pypandoc==1.13",
    "pyvista==0.44.1",
    "ipywidgets==8.1.5",
    "trame==3.6.5",
    "trame-vtk==2.8.10",
    "trame-plotly==3.0.2",
    "trame-vuetify==2.7.1",
    "imageio==2.35.1",
    "sphinx==8.0.2",
    "sphinx-autodoc-typehints==2.4.4",
    "sphinx-copybutton==0.5.2",
    "sphinx-design==0.6.1",
    "sphinx-gallery==0.17.1",
    "sphinx-jinja==2.0.2",
    "sphinx-notfound-page==1.0.4",
    "sphinx-toolbox==3.8.0",
    "sphinxemoji==0.3.1",
    "ipython>=7.0.0",
]

[project.urls]
Source = "https://github.com/ansys/pyadditive"
Issues = "https://github.com/ansys/pyadditive/issues"
Documentation = "https://additive.docs.pyansys.com"
Discussions = "https://github.com/ansys/pyadditive/discussions"
Releases = "https://github.com/ansys/pyadditive/releases"

[tool.flit.module]
name = "ansys.additive.core"

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
force_sort_within_sections = true
line_length = 100
default_section = "THIRDPARTY"
src_paths = ["doc", "src", "tests"]

[tool.coverage.run]
source = ["ansys.additive.core"]

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "7.1"
addopts = "-ra --cov=ansys.additive.core --cov-report html:.cov/html --cov-report xml:.cov/xml --cov-report term -vv --cov-fail-under 95"
testpaths = ["tests"]
filterwarnings = ["ignore:::.*protoc_gen_swagger*"]

[tool.interrogate]
ignore-semiprivate = true
ignore-private = true
ignore-setters = true
ignore-magic = true
verbose = 1

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = ["doc", "examples", "tests"]

[tool.ruff.lint]
select = [
    # "A", # flake8-builtins
    # "ANN", # flake8-annotations
    # "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    # "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    # "C90", # mccabe
    # "CPY", # flake8-copyright
    "D", # pydocstyle
    # "DJ", # flake8-django
    # "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    # "EM", # flake8-errmsg
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    # "FA", # flake8-future-annotations
    # "FBT", # flake8-boolean-trap
    # "FIX", # flake8-fixme
    "FLY", # flying
    # "FURB", # refurb
    # "G", # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420
    "LOG", # flake8-logging
    # "N", # pep8-naming
    # "PD", # pandas-vet
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    # "PLR", # pylint - refactor
    "PLW", # pylint - warning
    # "PT", # flake8-pytest-style
    # "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q",   # flake8-quotes
    # "RET", # flake8-return
    "RSE", # flake8-raise
    # "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    # "SLF", # flake8-self
    "SLOT", # flake8-slot
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    # "TD", # flake8-todos
    "TID", # flake8-tidy-imports
    # "TRIO", # flake8-trio
    # "TRY", # tryceratops
    # "UP", # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
ignore = [
    # "D100",   # pydocstyle - missing docstring in public module
    # "D101",   # pydocstyle - missing docstring in public class
    # "D102",   # pydocstyle - missing docstring in public method
    # "D103",   # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    # "D107",   # pydocstyle - missing docstring in __init__
    "D202",   # pydocstyle - no blank lines allowed after function docstring
    "D203",   # pydocstyle - 1 blank line required before class docstring
    "D204",   # pydocstyle - 1 blank line required after class docstring
    "D205",   # pydocstyle - 1 blank line required between summary line and description
    "D212",   # pydocstyle - multi-line docstring summary should start at the first line
    "D213",   # pydocstyle - multi-line docstring summary should start at the second line
    "E501",   # pycodestyle line too long, handled by formatting
    "ISC001", # Ruff formatter incompatible
    "S101",   # flake8-bandit - use of assert
    "ERA001", # eradicate - commented out code
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
"examples/*" = [
    "D",    # all docstring rules
    "E402", # module level import not at top of file
    "T201", # print statement
]
"dev/scripts/*" = [
    "D",      # all docstring rules
    "INP001", # implicit namespace package
]
"src/ansys/additive/core/logger.py" = [
    "PLW0642", # reassigned self
]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
