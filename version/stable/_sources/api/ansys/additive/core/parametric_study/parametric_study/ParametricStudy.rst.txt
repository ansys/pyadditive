





:class:`ParametricStudy`
========================


.. py:class:: ansys.additive.core.parametric_study.parametric_study.ParametricStudy(file_name: str | os.PathLike, material_name: str)

   
   Provides data storage and utility methods for a parametric study.
















   ..
       !! processed by numpydoc !!




.. py:currentmodule:: ParametricStudy

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~import_csv_study`
            - Import a parametric study from a CSV file.
          * - :py:attr:`~data_frame`
            - Return a :class:`DataFrame <pandas.DataFrame>` containing the study simulations.
          * - :py:attr:`~save`
            - Save the parametric study to a file.
          * - :py:attr:`~reset_simulation_status`
            - Reset the status of any ``Pending`` or ``Running`` simulations to ``New``.
          * - :py:attr:`~clear_errors`
            - Clear the error messages for the specified simulations.
          * - :py:attr:`~add_summaries`
            - Add summaries of executed simulations to the parametric study.
          * - :py:attr:`~generate_single_bead_permutations`
            - Add single bead permutations to the parametric study.
          * - :py:attr:`~generate_porosity_permutations`
            - Add porosity permutations to the parametric study.
          * - :py:attr:`~generate_microstructure_permutations`
            - Add microstructure permutations to the parametric study.
          * - :py:attr:`~update`
            - Update the results of simulations in the parametric study.
          * - :py:attr:`~add_inputs`
            - Add new simulations to the parametric study.
          * - :py:attr:`~remove`
            - Remove simulations from the parametric study.
          * - :py:attr:`~set_simulation_status`
            - Set the status of simulations in the parametric study.
          * - :py:attr:`~set_priority`
            - Set the priority of simulations in the parametric study.
          * - :py:attr:`~set_iteration`
            - Set the iteration number of simulations in the parametric study.
          * - :py:attr:`~clear`
            - Remove all permutations from the parametric study.
          * - :py:attr:`~simulation_inputs`
            - Get a list of simulation inputs from the parametric study.
          * - :py:attr:`~filter_data_frame`
            - Apply filters to the parametric study and return the filtered data frame.


   .. tab-item:: Properties

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~format_version`
            - Version of the parametric study file format.
          * - :py:attr:`~file_name`
            - Name of the file where the parametric study is stored.
          * - :py:attr:`~material_name`
            - Name of material used in the parametric study.



   .. tab-item:: Static methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~load`
            - Load a parametric study from a file.
          * - :py:attr:`~update_format`
            - Update a parametric study to the latest format version.





Import detail
-------------

.. code-block:: python

    from ansys.additive.core.parametric_study.parametric_study import ParametricStudy

Property detail
---------------

.. py:property:: format_version
   :type: int


   
   Version of the parametric study file format.
















   ..
       !! processed by numpydoc !!

.. py:property:: file_name
   :type: os.PathLike


   
   Name of the file where the parametric study is stored.
















   ..
       !! processed by numpydoc !!

.. py:property:: material_name
   :type: str | None


   
   Name of material used in the parametric study.
















   ..
       !! processed by numpydoc !!




Method detail
-------------

.. py:method:: import_csv_study(file_name: str | os.PathLike) -> list[str]

   
   Import a parametric study from a CSV file.


   :Parameters:

       **file_name: str, os.PathLike**
           Name of the csv file containing the simulation parameters.

       **For the column names used in the returned data frame, see**
           ..

       **the :class:`ColumnNames <constants.ColumnNames>` class.**
           ..



   :Returns:

       :class:`python:list`\[:class:`python:str`]
           List of error messages of any simulations that have invalid
           input parameters.











   ..
       !! processed by numpydoc !!

.. py:method:: data_frame() -> pandas.DataFrame

   
   Return a :class:`DataFrame <pandas.DataFrame>` containing the study simulations.

   For the column names used in the returned data frame, see
   the :class:`ColumnNames <constants.ColumnNames>` class.

   .. note::
      Updating the returned data frame does not update this parametric study.















   ..
       !! processed by numpydoc !!

.. py:method:: save(file_name: str | os.PathLike)

   
   Save the parametric study to a file.


   :Parameters:

       **file_name** : :class:`python:str`, :obj:`os.PathLike`
           Name of the file to save the parametric study to.














   ..
       !! processed by numpydoc !!

.. py:method:: load(file_name: str | os.PathLike) -> ParametricStudy
   :staticmethod:


   
   Load a parametric study from a file.


   :Parameters:

       **file_name** : :class:`python:str`, :obj:`os.PathLike`
           Name of the parametric study file to load. This file is overwritten
           when the parametric study is updated. To prevent this behavior, update
           the ``file_name`` attribute of the returned parametric study after
           calling ``load()``.



   :Returns:

       :obj:`ParametricStudy`
           Loaded parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: reset_simulation_status()

   
   Reset the status of any ``Pending`` or ``Running`` simulations to ``New``.
















   ..
       !! processed by numpydoc !!

.. py:method:: clear_errors(simulation_ids: list[str] | None = None)

   
   Clear the error messages for the specified simulations.


   :Parameters:

       **simulation_ids** : :class:`python:list`\[:class:`python:str`], default: :data:`python:None`
           List of simulation IDs to clear the error messages for. If this value
           is ``None``, all error messages are cleared.














   ..
       !! processed by numpydoc !!

.. py:method:: add_summaries(summaries: list[ansys.additive.core.single_bead.SingleBeadSummary | ansys.additive.core.porosity.PorositySummary | ansys.additive.core.microstructure.MicrostructureSummary], iteration: int = DEFAULT_ITERATION) -> int

   
   Add summaries of executed simulations to the parametric study.

   Simulation summaries are created using the :meth:`Additive.simulate` method.
   This method adds new simulations to the parametric study. To update existing
   simulations, use the :meth:`update` method.

   A summary that matches an existing simulation will overwrite the results for
   that simulation.

   :Parameters:

       **summaries** : :class:`python:list`\[:obj:`SingleBeadSummary`, :obj:`PorositySummary`, :obj:`MicrostructureSummary`]
           List of simulation result summaries to add to the parametric study.

       **iteration** : :class:`python:int`, default: :obj:`DEFAULT_ITERATION`
           Iteration number for the new simulations.



   :Returns:

       :class:`python:int`
           Number of new simulations added to the parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: generate_single_bead_permutations(laser_powers: list[float], scan_speeds: list[float], bead_length: float = SingleBeadInput.DEFAULT_BEAD_LENGTH, layer_thicknesses: list[float] | None = None, heater_temperatures: list[float] | None = None, beam_diameters: list[float] | None = None, min_pv_ratio: float | None = None, max_pv_ratio: float | None = None, iteration: int = DEFAULT_ITERATION, priority: int = DEFAULT_PRIORITY) -> int

   
   Add single bead permutations to the parametric study.


   :Parameters:

       **laser_powers** : :class:`python:list`\[:class:`python:float`]
           Laser powers (W) to use for single bead simulations. Valid values
           are from :obj:`MIN_LASER_POWER <MachineConstants.MIN_LASER_POWER>`
           to :obj:`MAX_LASER_POWER <MachineConstants.MAX_LASER_POWER>`.

       **scan_speeds** : :class:`python:list`\[:class:`python:float`]
           Scan speeds (m/s) to use for single bead simulations. Valid values are
           from :obj:`MIN_SCAN_SPEED <MachineConstants.MIN_SCAN_SPEED>` to
           :obj:`MAX_SCAN_SPEED <MachineConstants.MAX_SCAN_SPEED>`.

       **bead_length** : :class:`python:float`, default: :class:`DEFAULT_BEAD_LENGTH <SingleBeadInput.DEFAULT_BEAD_LENGTH>`
           Length of the bead (m). Valid values are from :obj:`MIN_BEAD_LENGTH <SingleBeadInput.MIN_BEAD_LENGTH>`
           to :obj:`MAX_BEAD_LENGTH <SingleBeadInput.MAX_BEAD_LENGTH>`.

       **layer_thicknesses** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Layer thicknesses (m) to use for single bead simulations.
           If this value is ``None``, :obj:`DEFAULT_LAYER_THICKNESS <MachineConstants.DEFAULT_LAYER_THICKNESS>`
           is used. Valid values are from :obj:`MIN_LAYER_THICKNESS <MachineConstants.MIN_LAYER_THICKNESS>`
           to :obj:`MAX_LAYER_THICKNESS <MachineConstants.MAX_LAYER_THICKNESS>`.

       **heater_temperatures** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Heater temperatures (C) to use for single bead simulations.
           If this value is ``None``, :obj:`DEFAULT_HEATER_TEMP <MachineConstants.DEFAULT_HEATER_TEMP>`
           is used. Valid values are from :obj:`MIN_HEATER_TEMP <MachineConstants.MIN_HEATER_TEMP>`
           to :obj:`MAX_HEATER_TEMP <MachineConstants.MAX_HEATER_TEMP>`.

       **beam_diameters** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Beam diameters (m) to use for single bead simulations.
           If this value is ``None``, :obj:`DEFAULT_BEAM_DIAMETER <MachineConstants.DEFAULT_BEAM_DIAMETER>`
           is used. Valid values are from :obj:`MIN_BEAM_DIAMETER <MachineConstants.MIN_BEAM_DIAMETER>`
           to :obj:`MAX_BEAM_DIAMETER <MachineConstants.MAX_BEAM_DIAMETER>`.

       **min_pv_ratio** : :class:`python:float`, default: :data:`python:None`
           The P/V ratio is defined as the ratio of laser power (w) to the velocity of the laser beam, which
           is the scan speed (m/s). Parameter combinations with ratios less than this value are not included.

       **max_pv_ratio** : :class:`python:float`, default: :data:`python:None`
           The P/V ratio is defined as the ratio of laser power (w) to the velocity of the laser beam, which
           is the scan speed (m/s). Parameter combinations with ratios greater than this value are not included.

       **iteration** : :class:`python:int`, default: :obj:`DEFAULT_ITERATION <constants.DEFAULT_ITERATION>`
           Iteration number for this set of simulations.

       **priority** : :class:`python:int`, default: :obj:`DEFAULT_PRIORITY <constants.DEFAULT_PRIORITY>`
           Priority for this set of simulations.



   :Returns:

       :class:`python:int`
           Number of single bead permutations added to the parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: generate_porosity_permutations(laser_powers: list[float], scan_speeds: list[float], size_x: float = PorosityInput.DEFAULT_SAMPLE_SIZE, size_y: float = PorosityInput.DEFAULT_SAMPLE_SIZE, size_z: float = PorosityInput.DEFAULT_SAMPLE_SIZE, layer_thicknesses: list[float] | None = None, heater_temperatures: list[float] | None = None, beam_diameters: list[float] | None = None, start_angles: list[float] | None = None, rotation_angles: list[float] | None = None, hatch_spacings: list[float] | None = None, stripe_widths: list[float] | None = None, min_energy_density: float | None = None, max_energy_density: float | None = None, min_build_rate: float | None = None, max_build_rate: float | None = None, iteration: int = DEFAULT_ITERATION, priority: int = DEFAULT_PRIORITY) -> int

   
   Add porosity permutations to the parametric study.


   :Parameters:

       **laser_powers** : :class:`python:list`\[:class:`python:float`]
           Laser powers (W) to use for porosity simulations. Valid values
           are from :obj:`MIN_LASER_POWER <MachineConstants.MIN_LASER_POWER>`
           to :obj:`MAX_LASER_POWER <MachineConstants.MAX_LASER_POWER>`.

       **scan_speeds** : :class:`python:list`\[:class:`python:float`]
           Scan speeds (m/s) to use for porosity simulations. Valid values are from
           :obj:`MIN_SCAN_SPEED <MachineConstants.MIN_SCAN_SPEED>` to
           :obj:`MAX_SCAN_SPEED <MachineConstants.MAX_SCAN_SPEED>`.

       **size_x** : :class:`python:float`, default: :obj:`DEFAULT_SAMPLE_SIZE <PorosityInput.DEFAULT_SAMPLE_SIZE>`
           Size (m) of the porosity sample in the x direction.
           Valid values are from :obj:`MIN_SAMPLE_SIZE <PorosityInput.MIN_SAMPLE_SIZE>`
           to :obj:`MAX_SAMPLE_SIZE <PorosityInput.MAX_SAMPLE_SIZE>`.

       **size_y** : :class:`python:float`, :obj:`DEFAULT_SAMPLE_SIZE <PorosityInput.DEFAULT_SAMPLE_SIZE>`
           Size (m) of the porosity sample in the y direction.
           Valid values are from :obj:`MIN_SAMPLE_SIZE <PorosityInput.MIN_SAMPLE_SIZE>`
           to :obj:`MAX_SAMPLE_SIZE <PorosityInput.MAX_SAMPLE_SIZE>`.

       **size_z** : :class:`python:float`, :obj:`DEFAULT_SAMPLE_SIZE <PorosityInput.DEFAULT_SAMPLE_SIZE>`
           Size (m) of the porosity sample in the z direction.
           Valid values are from :obj:`MIN_SAMPLE_SIZE <PorosityInput.MIN_SAMPLE_SIZE>`
           to :obj:`MAX_SAMPLE_SIZE <PorosityInput.MAX_SAMPLE_SIZE>`.

       **layer_thicknesses** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Layer thicknesses (m) to use for porosity simulations.
           If this value is ``None``,
           :obj:`DEFAULT_LAYER_THICKNESS <MachineConstants.DEFAULT_LAYER_THICKNESS>`
           is used. Valid values are from :obj:`MIN_LAYER_THICKNESS <MachineConstants.MIN_LAYER_THICKNESS>`
           to :obj:`MAX_LAYER_THICKNESS <MachineConstants.MAX_LAYER_THICKNESS>`.

       **heater_temperatures** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Heater temperatures (C) to use for porosity simulations.
           If this value is ``None``,
           :obj:`DEFAULT_HEATER_TEMP <MachineConstants.DEFAULT_HEATER_TEMP>`
           is used. Valid values are from :obj:`MIN_HEATER_TEMP <MachineConstants.MIN_HEATER_TEMP>`
           to :obj:`MAX_HEATER_TEMP <MachineConstants.MAX_HEATER_TEMP>`.

       **beam_diameters** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Beam diameters (m) to use for porosity simulations.
           If this value is ``None``, :obj:`DEFAULT_BEAM_DIAMETER`
           is used. Valid values are from :obj:`MIN_BEAM_DIAMETER <MachineConstants.MIN_BEAM_DIAMETER>`
           to :obj:`MAX_BEAM_DIAMETER <MachineConstants.MAX_BEAM_DIAMETER>`.

       **start_angles** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Scan angles (deg) for the first layer to use for porosity simulations.
           If this value is ``None``,
           :obj:`DEFAULT_STARTING_LAYER_ANGLE <MachineConstants.DEFAULT_STARTING_LAYER_ANGLE>`
           is used. Valid values are from :obj:`MIN_STARTING_LAYER_ANGLE <MachineConstants.MIN_STARTING_LAYER_ANGLE>`
           to :obj:`MAX_STARTING_LAYER_ANGLE <MachineConstants.MAX_STARTING_LAYER_ANGLE>`.

       **rotation_angles** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Angles (deg) by which the scan direction is rotated with each layer
           to use for porosity simulations. If this value is ``None``,
           :obj:`DEFAULT_LAYER_ROTATION_ANGLE <MachineConstants.DEFAULT_LAYER_ROTATION_ANGLE>`
           is used. Valid values are from :obj:`MIN_LAYER_ROTATION_ANGLE <MachineConstants.MIN_LAYER_ROTATION_ANGLE>`
           to :obj:`MAX_LAYER_ROTATION_ANGLE <MachineConstants.MAX_LAYER_ROTATION_ANGLE>`.

       **hatch_spacings** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Hatch spacings (m) to use for porosity simulations. If this value is ``None``,
           :obj:`DEFAULT_HATCH_SPACING <MachineConstants.DEFAULT_HATCH_SPACING>` is used.
           Valid values are from :obj:`MIN_HATCH_SPACING <MachineConstants.MIN_HATCH_SPACING>`
           to :obj:`MAX_HATCH_SPACING <MachineConstants.MAX_HATCH_SPACING>`.

       **stripe_widths** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Stripe widths (m) to use for porosity simulations. If this value is ``None``,
           :obj:`DEFAULT_SLICING_STRIPE_WIDTH <MachineConstants.DEFAULT_SLICING_STRIPE_WIDTH>`
           is used. Valid values are from :obj:`MIN_SLICING_STRIPE_WIDTH <MachineConstants.MIN_SLICING_STRIPE_WIDTH>`
           to :obj:`MAX_SLICING_STRIPE_WIDTH <MachineConstants.MAX_SLICING_STRIPE_WIDTH>`.

       **min_energy_density** : :class:`python:float`, default: :data:`python:None`
           Minimum energy density (J/m^3) to use for porosity simulations. Energy density is
           defined as laser power / (layer thickness * scan speed * hatch spacing).
           Parameter combinations with an energy density below this value are not included.

       **max_energy_density** : :class:`python:float`, default: :data:`python:None`
           Maximum energy density (J/m^3) to use for porosity simulations. Energy density is
           defined as laser power / (layer thickness * scan speed * hatch spacing).
           Parameter combinations with an energy density above this value are not included.

       **min_build_rate** : :class:`python:float`, default: :data:`python:None`
           Minimum build rate (m^3/s) to use for porosity simulations. Parameter combinations
           with a build rate below this value are not included. Build rate is defined as
           layer thickness * scan speed * hatch spacing.

       **max_build_rate** : :class:`python:float`, default: :data:`python:None`
           Maximum build rate (m^3/s) to use for porosity simulations. Parameter combinations
           with a build rate above this value are not included. Build rate is defined as
           layer thickness * scan speed * hatch spacing.

       **iteration** : :class:`python:int`, default: :obj:`DEFAULT_ITERATION <constants.DEFAULT_ITERATION>`
           Iteration number for this set of simulations.

       **priority** : :class:`python:int`, default: :obj:`DEFAULT_PRIORITY <constants.DEFAULT_PRIORITY>`
           Priority for this set of simulations.



   :Returns:

       :class:`python:int`
           Number of porosity permutations added to the parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: generate_microstructure_permutations(laser_powers: list[float], scan_speeds: list[float], min_x: float = MicrostructureInput.DEFAULT_POSITION_COORDINATE, min_y: float = MicrostructureInput.DEFAULT_POSITION_COORDINATE, min_z: float = MicrostructureInput.DEFAULT_POSITION_COORDINATE, size_x: float = MicrostructureInput.DEFAULT_SAMPLE_SIZE, size_y: float = MicrostructureInput.DEFAULT_SAMPLE_SIZE, size_z: float = MicrostructureInput.DEFAULT_SAMPLE_SIZE, sensor_dimension: float = MicrostructureInput.DEFAULT_SENSOR_DIMENSION, layer_thicknesses: list[float] | None = None, heater_temperatures: list[float] | None = None, beam_diameters: list[float] | None = None, start_angles: list[float] | None = None, rotation_angles: list[float] | None = None, hatch_spacings: list[float] | None = None, stripe_widths: list[float] | None = None, min_energy_density: float | None = None, max_energy_density: float | None = None, min_build_rate: float | None = None, max_build_rate: float | None = None, cooling_rate: float | None = None, thermal_gradient: float | None = None, melt_pool_width: float | None = None, melt_pool_depth: float | None = None, random_seed: int | None = None, iteration: int = DEFAULT_ITERATION, priority: int = DEFAULT_PRIORITY) -> int

   
   Add microstructure permutations to the parametric study.


   :Parameters:

       **laser_powers** : :class:`python:list`\[:class:`python:float`]
           Laser powers (W) to use for microstructure simulations. Valid values
           are from :obj:`MIN_LASER_POWER <MachineConstants.MIN_LASER_POWER>`
           to :obj:`MAX_LASER_POWER <MachineConstants.MAX_LASER_POWER>`.

       **scan_speeds** : :class:`python:list`\[:class:`python:float`]
           Scan speeds (m/s) to use for microstructure simulations. Valid values are from
           :obj:`MIN_SCAN_SPEED <MachineConstants.MIN_SCAN_SPEED>` to
           :obj:`MAX_SCAN_SPEED <MachineConstants.MAX_SCAN_SPEED>`.

       **min_x** : :class:`python:float`, default: :obj:`DEFAULT_POSITION_COORDINATE <MicrostructureInput.DEFAULT_POSITION_COORDINATE>`
           Minimum x coordinate (m) of the microstructure sample. Valid values are from
           :obj:`MIN_POSITION_COORDINATE <MicrostructureInput.MIN_POSITION_COORDINATE>`
           to :obj:`MAX_POSITION_COORDINATE <MicrostructureInput.MAX_POSITION_COORDINATE>`.

       **min_y** : :class:`python:float`, default: :obj:`DEFAULT_POSITION_COORDINATE <MicrostructureInput.DEFAULT_POSITION_COORDINATE>`
           Minimum y coordinate (m) of the microstructure sample. Valid values are from
           :obj:`MIN_POSITION_COORDINATE <MicrostructureInput.MIN_POSITION_COORDINATE>`
           to :obj:`MAX_POSITION_COORDINATE <MicrostructureInput.MAX_POSITION_COORDINATE>`.

       **min_z** : :class:`python:float`, default: :obj:`DEFAULT_POSITION_COORDINATE <MicrostructureInput.DEFAULT_POSITION_COORDINATE>`
           Minimum z coordinate (m) of the microstructure sample. Valid values are from
           :obj:`MIN_POSITION_COORDINATE <MicrostructureInput.MIN_POSITION_COORDINATE>`
           to :obj:`MAX_POSITION_COORDINATE <MicrostructureInput.MAX_POSITION_COORDINATE>`.

       **size_x** : :class:`python:float`, default: :obj:`DEFAULT_SAMPLE_SIZE <MicrostructureInput.DEFAULT_SAMPLE_SIZE>`
           Size (m) of the microstructure sample in the x direction.
           Valid values are from :obj:`MIN_SAMPLE_SIZE <MicrostructureInput.MIN_SAMPLE_SIZE>`
           to :obj:`MAX_SAMPLE_SIZE <MicrostructureInput.MAX_SAMPLE_SIZE>`.

       **size_y** : :class:`python:float`, default: :obj:`DEFAULT_SAMPLE_SIZE <MicrostructureInput.DEFAULT_SAMPLE_SIZE>`
           Size (m) of the microstructure sample in the y direction.
           Valid values are from :obj:`MIN_SAMPLE_SIZE <MicrostructureInput.MIN_SAMPLE_SIZE>`
           to :obj:`MAX_SAMPLE_SIZE <MicrostructureInput.MAX_SAMPLE_SIZE>`.

       **size_z** : :class:`python:float`, default: :obj:`DEFAULT_SAMPLE_SIZE <MicrostructureInput.DEFAULT_SAMPLE_SIZE>`
           Size (m) of the microstructure sample in the z direction.
           Valid values are from :obj:`MIN_SAMPLE_SIZE <MicrostructureInput.MIN_SAMPLE_SIZE>`
           to :obj:`MAX_SAMPLE_SIZE <MicrostructureInput.MAX_SAMPLE_SIZE>`.

       **sensor_dimension** : :class:`python:float`, default: :obj:`DEFAULT_SENSOR_DIMENSION <MicrostructureInput.DEFAULT_SENSOR_DIMENSION>`
           Sensor dimension (m) to use for microstructure simulations.
           Valid values are from :obj:`MIN_SENSOR_DIMENSION <MicrostructureInput.MIN_SENSOR_DIMENSION>`
           to :obj:`MAX_SENSOR_DIMENSION <MicrostructureInput.MAX_SENSOR_DIMENSION>`.
           The values for the ``size_x`` and ``size_y`` parameters must be greater than the
           ``sensor_dimension`` parameter by :obj:`MIN_XY_SIZE_CUSHION <MicrostructureInput.MIN_XY_SIZE_CUSHION>`
           meters. The value for the ``size_z`` parameter must be greater than ``sensor_dimension``
           parameter by :obj:`MIN_Z_SIZE_CUSHION <MicrostructureInput.MIN_Z_SIZE_CUSHION>` meters.

       **layer_thicknesses** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Layer thicknesses (m) to use for microstructure simulations.
           If this value is ``None``,
           :obj:`DEFAULT_LAYER_THICKNESS <MachineConstants.DEFAULT_LAYER_THICKNESS>` is used.
           Valid values are from :obj:`MIN_LAYER_THICKNESS <MachineConstants.MIN_LAYER_THICKNESS>`
           to :obj:`MAX_LAYER_THICKNESS <MachineConstants.MAX_LAYER_THICKNESS>`.

       **heater_temperatures** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Heater temperatures (C) to use for microstructure simulations.
           If this value is ``None``,
           :obj:`DEFAULT_HEATER_TEMP <MachineConstants.DEFAULT_HEATER_TEMP>` is used.
           Valid values are from :obj:`MIN_HEATER_TEMP <MachineConstants.MIN_HEATER_TEMP>`
           to :obj:`MAX_HEATER_TEMP <MachineConstants.MAX_HEATER_TEMP>`.

       **beam_diameters** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Beam diameters (m) to use for microstructure simulations. If this value is ``None``,
           :obj:`DEFAULT_BEAM_DIAMETER <MachineConstants.DEFAULT_BEAM_DIAMETER>` is used.
           Valid values are from :obj:`MIN_BEAM_DIAMETER <MachineConstants.MIN_BEAM_DIAMETER>`
           to :obj:`MAX_BEAM_DIAMETER <MachineConstants.MAX_BEAM_DIAMETER>`.

       **start_angles** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Scan angles (deg) for the first layer to use for microstructure simulations.
           If this value is ``None``,
           :obj:`DEFAULT_STARTING_LAYER_ANGLE <MachineConstants.DEFAULT_STARTING_LAYER_ANGLE>`
           is used. Valid values are from :obj:`MIN_STARTING_LAYER_ANGLE <MachineConstants.MIN_STARTING_LAYER_ANGLE>`
           to :obj:`MAX_STARTING_LAYER_ANGLE <MachineConstants.MAX_STARTING_LAYER_ANGLE>`.

       **rotation_angles** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Angles (deg) by which the scan direction is rotated with each layer
           to use for microstructure simulations.
           If this value is ``None``, :obj:`DEFAULT_LAYER_ROTATION_ANGLE <MachineConstants.DEFAULT_LAYER_ROTATION_ANGLE>`
           is used. Valid values are from :obj:`MIN_LAYER_ROTATION_ANGLE <MachineConstants.MIN_LAYER_ROTATION_ANGLE>`
           to :obj:`MAX_LAYER_ROTATION_ANGLE <MachineConstants.MAX_LAYER_ROTATION_ANGLE>`.

       **hatch_spacings** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Hatch spacings (m) to use for microstructure simulations.
           If this value is ``None``, :obj:`DEFAULT_HATCH_SPACING <MachineConstants.DEFAULT_HATCH_SPACING>` is used.
           Valid values are from :obj:`MIN_HATCH_SPACING <MachineConstants.MIN_HATCH_SPACING>`
           to :obj:`MAX_HATCH_SPACING <MachineConstants.MAX_HATCH_SPACING>`.

       **stripe_widths** : :class:`python:list`\[:class:`python:float`], default: :data:`python:None`
           Stripe widths (m) to use for microstructure simulations.
           If this value is ``None``, :obj:`DEFAULT_SLICING_STRIPE_WIDTH <MachineConstants.DEFAULT_SLICING_STRIPE_WIDTH>`
           is used. Valid values are from :obj:`MIN_SLICING_STRIPE_WIDTH <MachineConstants.MIN_SLICING_STRIPE_WIDTH>`
           to :obj:`MAX_SLICING_STRIPE_WIDTH <MachineConstants.MAX_SLICING_STRIPE_WIDTH>`.

       **min_energy_density** : :class:`python:float`, default: :data:`python:None`
           Minimum energy density (J/m^3) to use for microstructure simulations. Energy density is
           defined as laser power / (layer thickness * scan speed * hatch spacing).
           Parameter combinations with an energy density below this value are not included.

       **max_energy_density** : :class:`python:float`, default: :data:`python:None`
           Maximum energy density (J/m^3) to use for microstructure simulations. Energy density is
           defined as laser power / (layer thickness * scan speed * hatch spacing).
           Parameter combinations with an energy density above this value are not included.

       **min_build_rate** : :class:`python:float`, default: :data:`python:None`
           The minimum build rate (m^3/s) to use for microstructure simulations.
           Parameter combinations with a build rate below this value will not be included.
           Build rate is defined as layer thickness * scan speed * hatch spacing.

       **max_build_rate** : :class:`python:float`, default: :data:`python:None`
           The maximum build rate (m^3/s) to use for microstructure simulations.
           Parameter combinations with a build rate above this value will not be included.
           Build rate is defined as layer thickness * scan speed * hatch spacing.

       **cooling_rate** : :class:`python:float`, default: :data:`python:None`
           The cooling rate (K/s) to use for microstructure simulations.
           If this value is ``None``, and ``thermal_gradient``, ``melt_pool_width``, and ``melt_pool_depth``
           are ``None``, the cooling rate is calculated. If ``None`` and any of the other three parameters
           are not ``None``, :obj:`DEFAULT_COOLING_RATE <MicrostructureInput.DEFAULT_COOLING_RATE>`
           is used. Valid values are from :obj:`MIN_COOLING_RATE <MicrostructureInput.MIN_COOLING_RATE>`
           to :obj:`MAX_COOLING_RATE <MicrostructureInput.MAX_COOLING_RATE>`.

       **thermal_gradient** : :class:`python:float`, default: :data:`python:None`
           Thermal gradient (K/m) to use for microstructure simulations.
           If this value is ``None``, and ``cooling_rate``, ``melt_pool_width``, and ``melt_pool_depth``
           are ``None``, the thermal gradient is calculated. If this value is ``None`` and any of the other three parameters
           are not ``None``, :obj:`DEFAULT_THERMAL_GRADIENT <MicrostructureInput.DEFAULT_THERMAL_GRADIENT>`           is used. Valid values are from :obj:`MIN_THERMAL_GRADIENT <MicrostructureInput.MIN_THERMAL_GRADIENT>`
           to :obj:`MAX_THERMAL_GRADIENT <MicrostructureInput.MAX_THERMAL_GRADIENT>`.

       **melt_pool_width** : :class:`python:float`, default: :data:`python:None`
           Melt pool width (m) to use for microstructure simulations.
           If this value is ``None`` and ``cooling_rate``, ``thermal_gradient``, and ``melt_pool_depth``
           are ``None``, the melt pool is calculated. If this value is ``None`` and any of the other three parameters
           are not ``None``, :obj:`DEFAULT_MELT_POOL_WIDTH <MicrostructureInput.DEFAULT_MELT_POOL_WIDTH>` is used.
           Valid values are from :obj:`MIN_MELT_POOL_WIDTH <MicrostructureInput.MIN_MELT_POOL_WIDTH>`
           to :obj:`MAX_MELT_POOL_WIDTH <MicrostructureInput.MAX_MELT_POOL_WIDTH>`.

       **melt_pool_depth** : :class:`python:float`, default: :data:`python:None`
           Melt pool depth (m) to use for microstructure simulations.
           If this value is ``None``, and ``cooling_rate``, ``thermal_gradient``, and ``melt_pool_width``
           are ``None``, the melt pool depth is calculated. If this value is ``None`` and any of the other three parameters
           are not ``None``, :obj:`DEFAULT_MELT_POOL_DEPTH <MicrostructureInput.DEFAULT_MELT_POOL_DEPTH>` is used.
           Valid values are from :obj:`MIN_MELT_POOL_DEPTH <MicrostructureInput.MIN_MELT_POOL_DEPTH>`
           to :obj:`MAX_MELT_POOL_DEPTH <MicrostructureInput.MAX_MELT_POOL_DEPTH>`.

       **random_seed** : :class:`python:int`, default: :data:`python:None`
           The random seed to use for microstructure simulations. If this value is ``None``,
           an automatically generated random seed is used.
           Valid values are from :obj:`MIN_RANDOM_SEED <MicrostructureInput.MIN_RANDOM_SEED>`
           to :obj:`MAX_RANDOM_SEED <MicrostructureInput.MAX_RANDOM_SEED>`.

       **iteration** : :class:`python:int`, default: :obj:`DEFAULT_ITERATION <constants.DEFAULT_ITERATION>`
           Iteration number for this set of simulations.

       **priority** : :class:`python:int`, default: :obj:`DEFAULT_PRIORITY <constants.DEFAULT_PRIORITY>`
           Priority for this set of simulations.



   :Returns:

       :class:`python:int`
           Number of microstructure permutations added to the parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: update(summaries: list[ansys.additive.core.single_bead.SingleBeadSummary | ansys.additive.core.porosity.PorositySummary | ansys.additive.core.microstructure.MicrostructureSummary | ansys.additive.core.simulation_error.SimulationError])

   
   Update the results of simulations in the parametric study.

   This method updates values for existing simulations in the parametric study. To add
   completed simulations, use the :meth:`add_summaries` method instead.

   :Parameters:

       **summaries** : :class:`python:list`\[:obj:`SingleBeadSummary`, :obj:`PorositySummary`, :obj:`MicrostructureSummary`, :obj:`SimulationError`]
           List of simulation summaries to use for updating the parametric study.














   ..
       !! processed by numpydoc !!

.. py:method:: add_inputs(inputs: list[ansys.additive.core.single_bead.SingleBeadInput | ansys.additive.core.porosity.PorosityInput | ansys.additive.core.microstructure.MicrostructureInput], iteration: int = DEFAULT_ITERATION, priority: int = DEFAULT_PRIORITY, status: ansys.additive.core.simulation.SimulationStatus = SimulationStatus.NEW) -> int

   
   Add new simulations to the parametric study.

   If the input matches an existing simulation, the input will be ignored.

   :Parameters:

       **inputs** : :class:`python:list`\[:obj:`SingleBeadInput`, :obj:`PorosityInput`, :obj:`MicrostructureInput`]
           List of simulation inputs to add to the parametric study.

       **iteration** : :class:`python:int`, default: :obj:`DEFAULT_ITERATION <constants.DEFAULT_ITERATION>`
           Iteration number for the simulation inputs.

       **priority** : :class:`python:int`, default: :obj:`DEFAULT_PRIORITY <constants.DEFAULT_PRIORITY>`
           Priority for the simulations.

       **status** : :obj:`SimulationStatus`, default: :obj:`SimulationStatus.NEW`
           Valid types are :obj:`SimulationStatus.NEW` and :obj:`SimulationStatus.SKIP`.



   :Returns:

       :class:`python:int`
           The number of simulations added to the parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: remove(ids: str | list[str])

   
   Remove simulations from the parametric study.


   :Parameters:

       **ids** : :class:`python:str`, :class:`python:list`\[:class:`python:str`]
           One or more ID values for the simulations to remove.














   ..
       !! processed by numpydoc !!

.. py:method:: set_simulation_status(ids: str | list[str], status: ansys.additive.core.simulation.SimulationStatus, err_msg: str = '')

   
   Set the status of simulations in the parametric study.


   :Parameters:

       **ids** : :class:`python:str`, :class:`python:list`\[:class:`python:str`]
           One or more IDs of the simulations to update.

       **status** : :obj:`SimulationStatus`
           Status for the simulations.

       **err_msg** : :class:`python:str`, default: ""
           Error message for the simulations. Only used if status is SimulationStatus.ERROR.














   ..
       !! processed by numpydoc !!

.. py:method:: set_priority(ids: str | list[str], priority: int)

   
   Set the priority of simulations in the parametric study.


   :Parameters:

       **ids** : :class:`python:str`, :class:`python:list`\[:class:`python:str`]
           One or more IDs of the simulations to update.

       **priority** : :class:`python:int`
           Priority for the simulations.














   ..
       !! processed by numpydoc !!

.. py:method:: set_iteration(ids: str | list[str], iteration: int)

   
   Set the iteration number of simulations in the parametric study.

   The iteration number is used to track the evolution of a
   design of experiments. Its use is optional.

   :Parameters:

       **ids** : :class:`python:str`, :class:`python:list`\[:class:`python:str`]
           One or more IDs of the simulations to update.

       **iteration** : :class:`python:int`
           Iteration for the simulations.














   ..
       !! processed by numpydoc !!

.. py:method:: clear()

   
   Remove all permutations from the parametric study.
















   ..
       !! processed by numpydoc !!

.. py:method:: update_format(study: ParametricStudy) -> ParametricStudy
   :staticmethod:


   
   Update a parametric study to the latest format version.


   :Parameters:

       **study** : :obj:`ParametricStudy`
           Parametric study to update.



   :Returns:

       :obj:`ParametricStudy`
           Updated parametric study.











   ..
       !! processed by numpydoc !!

.. py:method:: simulation_inputs(get_material_func: Callable[[str], ansys.additive.core.material.AdditiveMaterial], simulation_ids: list[str] = None, types: list[ansys.additive.core.simulation.SimulationType] = None, priority: int = None, iteration: int = None) -> list[ansys.additive.core.single_bead.SingleBeadInput | ansys.additive.core.porosity.PorosityInput | ansys.additive.core.microstructure.MicrostructureInput]

   
   Get a list of simulation inputs from the parametric study.


   :Parameters:

       **get_material_func: Callable[[str], AdditiveMaterial]**
           Function to get the material object from the material name.
           This can be a call to the Additive server or another source.

       **simulation_ids** : :class:`python:list`\[:class:`python:str`], default: :data:`python:None`
           List of simulation IDs to run. If this value is ``None``,
           all simulations with a status of ``New`` are run.

       **types** : :class:`python:list`\[:obj:`SimulationType`], default: :data:`python:None`
           Type of simulations to run. If this value is ``None``,
           all simulation types are run.

       **priority** : :class:`python:int`, default: :data:`python:None`
           Priority of simulations to run. If this value is ``None``,
           all priorities are run.

       **iteration** : :class:`python:int`, default: :data:`python:None`
           Iteration number of simulations to run. The default is ``None``,
           all iterations are run.



   :Returns:

       :class:`python:list`\[:obj:`SingleBeadInput`, :obj:`PorosityInput`, :obj:`MicrostructureInput`]
           List of simulation inputs.











   ..
       !! processed by numpydoc !!

.. py:method:: filter_data_frame(simulation_ids: list[str] = None, types: list[ansys.additive.core.simulation.SimulationType] = None, priority: int = None, iteration: int = None) -> pandas.DataFrame

   
   Apply filters to the parametric study and return the filtered data frame.


   :Parameters:

       **simulation_ids: list[str], default: None**
           List of simulation IDs to include. The default is ``None``, in which case
           all simulations with status of :obj:`SimulationStatus.NEW` are selected.

       **types** : :class:`python:list`, default: :data:`python:None`
           List of simulation types to include. The default is ``None``, in which case
           all simulation types are selected.

       **priority** : :class:`python:int`, default: :data:`python:None`
           Priority of simulations to include. The default is ``None``, in which case
           all priorities are selected.

       **iteration** : :class:`python:int`, default: :data:`python:None`
           Iteration number of simulations to include. The default is ``None``, in which case
           all iterations are selected.



   :Returns:

       :obj:`pd.DataFrame`
           Filtered view of the parametric study data frame











   ..
       !! processed by numpydoc !!




