
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/06_additive_3d_microstructure.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_06_additive_3d_microstructure.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_06_additive_3d_microstructure.py:


3D Microstructure analysis (BETA)
#################################

.. warning::
    Beta Features Disclaimer

    * This is beta documentation for one or more beta software features.
    * Beta features are considered unreleased and have not been fully tested nor
      fully validated. The results are not guaranteed by Ansys, Inc. (Ansys) to be
      correct. You assume the risk of using beta features.
    * At its discretion, Ansys may release, change, or withdraw beta features
      in future revisions.
    * Beta features are not subject to the Ansys Class 3 error reporting system.
      Ansys makes no commitment to resolve defects reported against beta features;
      however, your feedback will help us improve the quality of the product.
    * Ansys does not guarantee that database and/or input files used with beta
      features will run successfully from version to version of the software, nor
      with the final released version of the features. You may need to modify the
      database and/or input files before running them on other versions.
    * Documentation for beta features is called beta documentation, and it may
      not be written to the same standard as documentation for released features.
      Beta documentation may not be complete at the time of product release.
      At its discretion, Ansys may add, change, or delete beta documentation
      at any time.

This example shows how to use PyAdditive to determine
the three-dimensional microstructure for a sample coupon
with given material and machine parameters.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

Perform required import and connect
-----------------------------------
Perform the required import and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 58-71

.. code-block:: Python


    import pyvista as pv

    from ansys.additive.core import (
        Additive,
        AdditiveMachine,
        Microstructure3DInput,
        SimulationError,
    )

    # Beta features must be enabled to use the 3D microstructure simulation.
    additive = Additive(enable_beta_features=True)








.. GENERATED FROM PYTHON SOURCE LINES 72-76

Select material
---------------
Select a material. You can use the :meth:`~Additive.materials_list` method to
obtain a list of available materials.

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: Python


    print("Available material names: {}".format(additive.materials_list()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Available material names: ['IN718', '17-4PH', 'Al357', 'Ti64', 'CoCr', '316L', 'IN625', 'AlSi10Mg']




.. GENERATED FROM PYTHON SOURCE LINES 80-82

You can obtain the parameters for a single material by passing a name
from the materials list to the :meth:`~Additive.material` method.

.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: Python


    material = additive.material("IN625")








.. GENERATED FROM PYTHON SOURCE LINES 86-91

Specify machine parameters
--------------------------
Specify machine parameters by first creating an :class:`AdditiveMachine` object
and then assigning the desired values. All values are in SI units (m, kg, s, K)
unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: Python


    machine = AdditiveMachine()

    # Show available parameters
    print(machine)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    AdditiveMachine
    laser_power: 195 W
    scan_speed: 1.0 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m





.. GENERATED FROM PYTHON SOURCE LINES 98-101

Set laser power and scan speed
------------------------------
Set the laser power and scan speed.

.. GENERATED FROM PYTHON SOURCE LINES 101-105

.. code-block:: Python


    machine.scan_speed = 1  # m/s
    machine.laser_power = 500  # W








.. GENERATED FROM PYTHON SOURCE LINES 106-109

Specify inputs for 3D microstructure simulation
------------------------------------------------
Specify microstructure inputs.

.. GENERATED FROM PYTHON SOURCE LINES 109-117

.. code-block:: Python

    input = Microstructure3DInput(
        machine=machine,
        material=material,
        sample_size_x=0.0001,  # in meters (.1 mm)
        sample_size_y=0.0001,
        sample_size_z=0.0001,
    )








.. GENERATED FROM PYTHON SOURCE LINES 118-123

Run simulation
--------------
Use the :meth:`~Additive.simulate` method of the ``additive`` object to run the simulation.
The returned object is either a :class:`Microstructure3DSummary` object or a
:class:`SimulationError` object.

.. GENERATED FROM PYTHON SOURCE LINES 123-129

.. code-block:: Python


    summary = additive.simulate(input)
    if isinstance(summary, SimulationError):
        raise Exception(summary.message)









.. GENERATED FROM PYTHON SOURCE LINES 130-135

Plot 3D grain visualization
---------------------------
The ``summary`` object includes a VTK file describing the 3D grain structure.
The VTK file contains scalar data sets ``GrainNumber``, ``Phi0_(deg)``,
``Phi1_(deg)``, ``Phi2_(deg)``, and ``Temperatures``.

.. GENERATED FROM PYTHON SOURCE LINES 135-146

.. code-block:: Python


    # Plot the Phi0 data of the 3D grain structure
    cmap = "coolwarm"
    ms3d = pv.read(summary.grain_3d_vtk)
    ms3d.plot(scalars="Phi0_(deg)", cmap=cmap)

    # Add a cut plane to the plot
    plotter = pv.Plotter()
    plotter.add_mesh_clip_plane(ms3d, scalars="Phi0_(deg)", cmap=cmap)
    plotter.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_06_additive_3d_microstructure_001.png
          :alt: 06 additive 3d microstructure
          :srcset: /examples/gallery_examples/images/sphx_glr_06_additive_3d_microstructure_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_06_additive_3d_microstructure_002.png
          :alt: 06 additive 3d microstructure
          :srcset: /examples/gallery_examples/images/sphx_glr_06_additive_3d_microstructure_002.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 147-151

Print average grain sizes
-------------------------
The ``summary`` object includes the average grain sizes in the XY, XZ, and YZ
planes.

.. GENERATED FROM PYTHON SOURCE LINES 151-156

.. code-block:: Python


    print("Average grain size in XY plane: {} µm".format(summary.xy_average_grain_size))
    print("Average grain size in XZ plane: {} µm".format(summary.xz_average_grain_size))
    print("Average grain size in YZ plane: {} µm".format(summary.yz_average_grain_size))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Average grain size in XY plane: 77.18740970766365 µm
    Average grain size in XZ plane: 77.2075615253535 µm
    Average grain size in YZ plane: 61.56124719801804 µm




.. GENERATED FROM PYTHON SOURCE LINES 157-160

Print the simulation logs
-------------------------
To print the simulation logs, use the :meth:`~Microstructure3DSummary.logs` property.

.. GENERATED FROM PYTHON SOURCE LINES 160-162

.. code-block:: Python


    print(summary.logs)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.311 seconds)


.. _sphx_glr_download_examples_gallery_examples_06_additive_3d_microstructure.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 06_additive_3d_microstructure.ipynb <06_additive_3d_microstructure.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 06_additive_3d_microstructure.py <06_additive_3d_microstructure.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 06_additive_3d_microstructure.zip <06_additive_3d_microstructure.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
