
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/01_additive_porosity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_01_additive_porosity.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_01_additive_porosity.py:


Porosity analysis
=================

This example shows how to use PyAdditive to determine
porosity for a given material and machine parameter combinations.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

Perform required import and connect
-----------------------------------
Perform the required import and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: Python


    from ansys.additive.core import Additive, AdditiveMachine, PorosityInput, SimulationError

    additive = Additive()








.. GENERATED FROM PYTHON SOURCE LINES 41-45

Select material
---------------
Select a material. You can use the :meth:`~Additive.materials_list` method to
obtain a list of available materials.

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: Python


    print("Available material names: {}".format(additive.materials_list()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Available material names: ['316L', 'AlSi10Mg', 'IN625', '17-4PH', 'Al357', 'Ti64', 'CoCr', 'IN718']




.. GENERATED FROM PYTHON SOURCE LINES 49-51

You can obtain the parameters for a single material by passing a name
from the materials list to the :meth:`~Additive.material` method.

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python


    material = additive.material("316L")








.. GENERATED FROM PYTHON SOURCE LINES 55-60

Specify machine parameters
--------------------------
Specify machine parameters by first creating an :class:`AdditiveMachine` object
and then assigning the desired values. All values are in SI units (m, kg, s, K)
unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: Python


    machine = AdditiveMachine()

    # Show available parameters
    print(machine)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    AdditiveMachine
    laser_power: 195 W
    scan_speed: 1.0 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m





.. GENERATED FROM PYTHON SOURCE LINES 67-70

Set laser power and scan speed
------------------------------
Set the laser power and scan speed.

.. GENERATED FROM PYTHON SOURCE LINES 70-74

.. code-block:: Python


    machine.scan_speed = 1.2  # m/s
    machine.laser_power = 250  # W








.. GENERATED FROM PYTHON SOURCE LINES 75-78

Specify inputs for porosity simulation
--------------------------------------
Create a :class:`PorosityInput` object containing the desired simulation parameters.

.. GENERATED FROM PYTHON SOURCE LINES 78-88

.. code-block:: Python


    input = PorosityInput(
        machine=machine,
        material=material,
        id="porosity-example",
        size_x=0.001,  # meters
        size_y=0.001,
        size_z=0.001,
    )








.. GENERATED FROM PYTHON SOURCE LINES 89-95

Run simulation
--------------
Use the :meth:`~Additive.simulate` method of the ``additive`` object to run the simulation.
The returned object is either a :class:`PorositySummary` object
containing the input and the relative density of the simulated sample or a
:class:`SimulationError` object.

.. GENERATED FROM PYTHON SOURCE LINES 95-100

.. code-block:: Python


    summary = additive.simulate(input)
    if isinstance(summary, SimulationError):
        raise Exception(summary.message)








.. GENERATED FROM PYTHON SOURCE LINES 101-103

Print relative density
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: Python


    print(f"For {summary.input.material.name} with \n", summary.input.machine)
    print(f"\n    relative density = {round(summary.relative_density, 5)}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    For 316L with 
     AdditiveMachine
    laser_power: 250 W
    scan_speed: 1.2 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m


        relative density = 0.99999





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 9.933 seconds)


.. _sphx_glr_download_examples_gallery_examples_01_additive_porosity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_additive_porosity.ipynb <01_additive_porosity.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_additive_porosity.py <01_additive_porosity.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
