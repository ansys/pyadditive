
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00_additive_single_bead.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00_additive_single_bead.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00_additive_single_bead.py:


Single bead analysis
====================

This example shows how to use PyAdditive to determine
melt pool characteristics for a given material and machine
parameter combinations.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

Perform required imports and connect
------------------------------------
Perform the required imports and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 36-49

.. code-block:: Python


    import matplotlib.pyplot as plt

    from ansys.additive.core import (
        Additive,
        AdditiveMachine,
        MeltPoolColumnNames,
        SimulationError,
        SingleBeadInput,
    )

    additive = Additive()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-07-23 22:41:29 Connected to localhost:50052




.. GENERATED FROM PYTHON SOURCE LINES 50-53

Get server connection information
---------------------------------
Get server connection information using the :meth:`about() <Additive.about>` method.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: Python


    additive.about()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Client 0.18.2, API version: 1.7.2
    ServerConnectionStatus(connected=True, channel_str='localhost:50052', metadata={'API version': '1.6.7', 'Version': '24.2.0'})




.. GENERATED FROM PYTHON SOURCE LINES 57-61

Select material
---------------
Select a material. You can use the :meth:`~Additive.materials_list` method to
obtain a list of available materials.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python


    print("Available material names: {}".format(additive.materials_list()))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Available material names: ['316L', 'AlSi10Mg', 'IN625', '17-4PH', 'Al357', 'Ti64', 'CoCr', 'IN718']




.. GENERATED FROM PYTHON SOURCE LINES 65-67

You can obtain the parameters for a single material by passing a name
from the materials list to the :meth:`~Additive.material` method.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python


    material = additive.material("IN718")








.. GENERATED FROM PYTHON SOURCE LINES 71-76

Specify machine parameters
--------------------------
Specify machine parameters by first creating an :class:`AdditiveMachine` object
and then assigning the desired values. All values are in SI units (m, kg, s, K)
unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: Python


    machine = AdditiveMachine()

    # Show available parameters
    print(machine)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    AdditiveMachine
    laser_power: 195 W
    scan_speed: 1.0 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m





.. GENERATED FROM PYTHON SOURCE LINES 83-86

Set laser power and scan speed
------------------------------
Set the laser power and scan speed.

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: Python


    machine.scan_speed = 1  # m/s
    machine.laser_power = 300  # W








.. GENERATED FROM PYTHON SOURCE LINES 91-94

Specify inputs for single bead simulation
-----------------------------------------
Create a :class:`SingleBeadInput` object containing the desired simulation parameters.

.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: Python


    input = SingleBeadInput(
        machine=machine, material=material, id="single-bead-example", bead_length=0.0012  # meters
    )








.. GENERATED FROM PYTHON SOURCE LINES 100-105

Run simulation
--------------
Use the :meth:`~Additive.simulate` method of the ``additive`` object to run the simulation.
The returned object is either a :class:`SingleBeadSummary` object containing the input
and a :class:`MeltPool` or a :class:`SimulationError` object.

.. GENERATED FROM PYTHON SOURCE LINES 105-110

.. code-block:: Python


    summary = additive.simulate(input)
    if isinstance(summary, SimulationError):
        raise Exception(summary.message)








.. GENERATED FROM PYTHON SOURCE LINES 111-119

Plot melt pool statistics
-------------------------
Obtain a :class:`Pandas DataFrame <pandas.DataFrame>` instance containing the melt pool
statistics by using the :meth:`~MeltPool.data_frame` method of the ``melt_pool``
attribute of the ``summary`` object. The column names for the :class:`~pandas.DataFrame`
instance are described in the documentation for :meth:`~MeltPool.data_frame`. Use the
:meth:`~pandas.DataFrame.plot` method to plot the melt pool dimensions as a function
of bead length.

.. GENERATED FROM PYTHON SOURCE LINES 119-137

.. code-block:: Python


    df = summary.melt_pool.data_frame().multiply(1e6)  # convert from meters to microns
    df.index *= 1e3  # convert bead length from meters to millimeters

    df.plot(
        y=[
            MeltPoolColumnNames.LENGTH,
            MeltPoolColumnNames.WIDTH,
            MeltPoolColumnNames.DEPTH,
            MeltPoolColumnNames.REFERENCE_WIDTH,
            MeltPoolColumnNames.REFERENCE_DEPTH,
        ],
        ylabel="Melt Pool Dimensions (µm)",
        xlabel="Bead Length (mm)",
        title="Melt Pool Dimensions vs Bead Length",
    )
    plt.show()




.. image-sg:: /examples/gallery_examples/images/sphx_glr_00_additive_single_bead_001.png
   :alt: Melt Pool Dimensions vs Bead Length
   :srcset: /examples/gallery_examples/images/sphx_glr_00_additive_single_bead_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 138-144

List melt pool statistics
-------------------------
You can show a table of the melt pool statistics by typing the name of the
data frame object and pressing enter. For brevity, the following code
uses the :meth:`~pandas.DataFrame.head` method so that only the first few rows are shown.
Note, if running this example as a Python script, no output is shown.

.. GENERATED FROM PYTHON SOURCE LINES 144-147

.. code-block:: Python


    df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>length</th>
          <th>width</th>
          <th>depth</th>
          <th>reference_width</th>
          <th>reference_depth</th>
        </tr>
        <tr>
          <th>bead_length</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.00</th>
          <td>91.414399</td>
          <td>93.027800</td>
          <td>27.820900</td>
          <td>0.000000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>0.02</th>
          <td>125.782996</td>
          <td>120.333999</td>
          <td>55.808499</td>
          <td>26.588401</td>
          <td>5.808540</td>
        </tr>
        <tr>
          <th>0.04</th>
          <td>148.120999</td>
          <td>130.749002</td>
          <td>75.404100</td>
          <td>64.150102</td>
          <td>25.404099</td>
        </tr>
        <tr>
          <th>0.06</th>
          <td>168.338999</td>
          <td>139.558002</td>
          <td>89.802198</td>
          <td>81.839800</td>
          <td>39.802201</td>
        </tr>
        <tr>
          <th>0.08</th>
          <td>187.985003</td>
          <td>145.352006</td>
          <td>97.820804</td>
          <td>91.859899</td>
          <td>47.820799</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 148-152

Save melt pool statistics
-------------------------
Save the melt pool statistics to a CSV file using the
:meth:`to_csv() <pandas.DataFrame.to_csv>` method.

.. GENERATED FROM PYTHON SOURCE LINES 152-154

.. code-block:: Python


    df.to_csv("melt_pool.csv")








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 26.212 seconds)


.. _sphx_glr_download_examples_gallery_examples_00_additive_single_bead.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00_additive_single_bead.ipynb <00_additive_single_bead.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00_additive_single_bead.py <00_additive_single_bead.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
