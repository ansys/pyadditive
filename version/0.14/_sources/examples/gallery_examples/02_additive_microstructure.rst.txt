
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/02_additive_microstructure.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02_additive_microstructure.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_02_additive_microstructure.py:


Microstructure analysis
#######################

This example shows how you can use PyAdditive to determine
the microstructure for a sample coupon with given material
and machine parameters.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

Perform required import and connect
-----------------------------------
Perform the required import and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default


    from ansys.additive.core import Additive, AdditiveMachine, MicrostructureInput, SimulationError

    additive = Additive()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    user data path: /home/runner/.local/share/ansys-pyadditive




.. GENERATED FROM PYTHON SOURCE LINES 42-47

Select material
---------------
Select a material. You can use the
:meth:`get_materials_list() <ansys.additive.core.additive.Additive.get_materials_list>`
method to obtain a list of available materials.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    print(additive.get_materials_list())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    names: "CoCr"
    names: "Al357"
    names: "316L"
    names: "Ti64"
    names: "17-4PH"
    names: "IN718"
    names: "AlSi10Mg"
    names: "IN625"





.. GENERATED FROM PYTHON SOURCE LINES 51-55

You can obtain the parameters for a single material by passing a name
from the materials list to the
:meth:`get_material() <ansys.additive.core.additive.Additive.get_material>`
method.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    material = additive.get_material("17-4PH")








.. GENERATED FROM PYTHON SOURCE LINES 59-64

Specify machine parameters
--------------------------
Specify machine parameters by first creating an ``AdditiveMachine`` object
and then assigning the desired values. All values are in SI units (m, kg, s, K)
unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 64-70

.. code-block:: default


    machine = AdditiveMachine()

    # Show available parameters
    print(machine)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    AdditiveMachine
    laser_power: 195 W
    scan_speed: 1.0 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m





.. GENERATED FROM PYTHON SOURCE LINES 71-74

Set laser power and scan speed
------------------------------
Set the laser power and scan speed.

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default


    machine.scan_speed = 1  # m/s
    machine.laser_power = 500  # W








.. GENERATED FROM PYTHON SOURCE LINES 79-86

Specify inputs for microstructure simulation
---------------------------------------------
Microstructure simulation inputs can include thermal parameters.
Thermal parameters consist of ``cooling_rate``, ``thermal_gradient``,
``melt_pool_width``, and ``melt_pool_depth``. If thermal parameters are not
specified, the thermal solver is used to obtain the parameters prior
to running the microstructure solver.

.. GENERATED FROM PYTHON SOURCE LINES 86-115

.. code-block:: default


    # Specify microstructure inputs with thermal parameters
    input_with_thermal = MicrostructureInput(
        machine=machine,
        material=material,
        id="micro-with-thermal",
        sensor_dimension=0.0005,
        sample_size_x=0.001,  # in meters (1 mm), must be >= sensor_dimension + 0.0005
        sample_size_y=0.001,  # in meters (1 mm), must be >= sensor_dimension + 0.0005
        sample_size_z=0.0015,  # in meters (1 mm), must be >= sensor_dimension + 0.001
        use_provided_thermal_parameters=True,
        cooling_rate=1.1e6,  # °K/s
        thermal_gradient=1.2e7,  # °K/m
        melt_pool_width=1.5e-4,  # meters (150 microns)
        melt_pool_depth=1.1e-4,  # meters (110 microns)
    )

    # Specify microstructure inputs without thermal parameters
    input_without_thermal = MicrostructureInput(
        machine=machine,
        material=material,
        id="micro-without-thermal",
        sensor_dimension=0.0005,
        sample_size_x=0.001,  # in meters (1 mm), must be >= sensor_dimension + 0.0005
        sample_size_y=0.001,  # in meters (1 mm), must be >= sensor_dimension + 0.0005
        sample_size_z=0.0015,  # in meters (1 mm), must be >= sensor_dimension + 0.001
        # use_provided_thermal_parameters defaults to False
    )








.. GENERATED FROM PYTHON SOURCE LINES 116-122

Run simulation
--------------
Use the :meth:`simulate() <ansys.additive.core.additive.Additive.simulate>` method of the
``additive`` object to run the simulation. The returned object is either a
:class:`MicrostructureSummary <ansys.additive.core.microstructure.MicrostructureSummary>`
object or a :class:`SimulationError <ansys.additive.core.simulation.SimulationError>`.

.. GENERATED FROM PYTHON SOURCE LINES 122-127

.. code-block:: default


    summary = additive.simulate(input_with_thermal)
    if isinstance(summary, SimulationError):
        raise Exception(summary.message)








.. GENERATED FROM PYTHON SOURCE LINES 128-135

Plot results
------------
The :class:`MicrostructureSummary <ansys.additive.core.microstructure.MicrostructureSummary>`
includes three VTK files, one for each of the XY, XZ, and YZ planes. Each VTK file
contains data sets for grain orientation, boundaries, and number. In addition,
:class:`MicrostructureSummary <ansys.additive.core.microstructure.MicrostructureSummary>`
includes circle equivalence data and average grain size for each plane.

.. GENERATED FROM PYTHON SOURCE LINES 135-145

.. code-block:: default


    from matplotlib import colors
    from matplotlib.colors import LinearSegmentedColormap as colorMap
    import matplotlib.pyplot as plt
    from matplotlib.ticker import PercentFormatter
    import pandas as pd
    import pyvista as pv

    from ansys.additive.core import CircleEquivalenceColumnNames








.. GENERATED FROM PYTHON SOURCE LINES 146-150

Plot grain 2D visualizations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Plot the planar data, read VTK data in data set objects, and create a color
map to use with the boundary map.

.. GENERATED FROM PYTHON SOURCE LINES 150-192

.. code-block:: default



    # Function to plot the planar data
    def plot_microstructure(
        xy_data: any, xz_data: any, yz_data: any, scalars: str, cmap: colors.LinearSegmentedColormap
    ):
        """Convenience function to plot microstructure VTK data."""
        font_size = 8
        plotter = pv.Plotter(shape=(2, 2), lighting="three lights")
        plotter.show_axes_all()
        plotter.add_mesh(xy_data, cmap=cmap, scalars=scalars)
        plotter.add_title("XY Plane", font_size=font_size)

        plotter.subplot(0, 1)
        plotter.add_mesh(xz_data, cmap=cmap, scalars=scalars)
        plotter.add_title("XZ Plane", font_size=font_size)

        plotter.subplot(1, 0)
        plotter.add_mesh(yz_data, cmap=cmap, scalars=scalars)
        plotter.add_title("YZ Plane", font_size=font_size)

        plotter.subplot(1, 1)
        plotter.add_mesh(xy_data, cmap=cmap, scalars=scalars)
        plotter.add_mesh(xz_data, cmap=cmap, scalars=scalars)
        plotter.add_mesh(yz_data, cmap=cmap, scalars=scalars)
        plotter.add_title("Combined", font_size=font_size)

        return plotter


    # Read VTK data into pyvista.DataSet objects
    xy = pv.read(summary.xy_vtk)
    xz = pv.read(summary.xz_vtk)
    yz = pv.read(summary.yz_vtk)

    # Create a color map to use with the boundary plot
    white_black_cmap = colorMap.from_list("whiteblack", ["white", "black"])

    plot_microstructure(xy, xz, yz, "GrainBoundaries", white_black_cmap).show(title="Grain Boundaries")
    plot_microstructure(xy, xz, yz, "Orientation_(deg)", "spectral").show(title="Orientation °")
    plot_microstructure(xy, xz, yz, "GrainNumber", None).show(title="Grain Number")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_001.png
          :alt: 02 additive microstructure
          :srcset: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_002.png
          :alt: 02 additive microstructure
          :srcset: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_003.png
          :alt: 02 additive microstructure
          :srcset: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_003.png
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 193-197

Plot Grain Statistics
^^^^^^^^^^^^^^^^^^^^^
Add grain statistic plots to a figure, create a figure for grain statistics,
and then plot the figure.

.. GENERATED FROM PYTHON SOURCE LINES 197-238

.. code-block:: default



    # Function to simplify plotting grain statistics
    def add_grain_statistics_to_figure(
        plane_data: pd.DataFrame,
        plane_str: str,
        plane_ave_grain_size: float,
        diameter_axes: plt.Axes,
        orientation_axes: plt.Axes,
    ):
        """Convenience function to add grain statistic plots to a figure."""
        xmax = len(plane_data[CircleEquivalenceColumnNames.DIAMETER])
        diameter_axes.hist(plane_data[CircleEquivalenceColumnNames.DIAMETER], bins=20, rwidth=0.75)
        diameter_axes.set_xlabel(f"Grain Diameter (µm)")
        diameter_axes.set_ylabel("Area Fraction")
        diameter_axes.set_title(
            plane_str.upper() + f" Grain Size Distribution, ave: {plane_ave_grain_size:.2f} µm"
        )
        diameter_axes.yaxis.set_major_formatter(PercentFormatter(xmax=xmax))
        orientation_axes.hist(
            plane_data[CircleEquivalenceColumnNames.ORIENTATION_ANGLE], bins=9, rwidth=0.75
        )
        orientation_axes.yaxis.set_major_formatter(PercentFormatter(xmax=xmax))
        orientation_axes.set_xlabel(f"Orientation Angle (°)")
        orientation_axes.set_ylabel("Number Fraction")
        orientation_axes.set_title(plane_str.upper() + " Orientation Angle")


    # Create figure for grain statistics
    fig, axs = plt.subplots(3, 2, figsize=(10, 15), tight_layout=True)
    fig.suptitle("Circle Equivalence Grain Data", fontsize=16)
    add_grain_statistics_to_figure(
        summary.xy_circle_equivalence, "xy", summary.xy_average_grain_size, axs[0][0], axs[0][1]
    )
    add_grain_statistics_to_figure(
        summary.xz_circle_equivalence, "xz", summary.xz_average_grain_size, axs[1][0], axs[1][1]
    )
    add_grain_statistics_to_figure(
        summary.yz_circle_equivalence, "yz", summary.yz_average_grain_size, axs[2][0], axs[2][1]
    )
    plt.show()



.. image-sg:: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_004.png
   :alt: Circle Equivalence Grain Data, XY Grain Size Distribution, ave: 28.77 µm, XY Orientation Angle, XZ Grain Size Distribution, ave: 35.29 µm, XZ Orientation Angle, YZ Grain Size Distribution, ave: 39.36 µm, YZ Orientation Angle
   :srcset: /examples/gallery_examples/images/sphx_glr_02_additive_microstructure_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 24.127 seconds)


.. _sphx_glr_download_examples_gallery_examples_02_additive_microstructure.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_additive_microstructure.py <02_additive_microstructure.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_additive_microstructure.ipynb <02_additive_microstructure.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
