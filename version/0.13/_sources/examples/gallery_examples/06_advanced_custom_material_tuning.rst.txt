
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/06_advanced_custom_material_tuning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_06_advanced_custom_material_tuning.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_06_advanced_custom_material_tuning.py:


Custom Material Tuning
======================

This tutorial shows how you can tune a custom material for use with PyAdditive.
Background information and file formats can be found in `the Additive documentation
<https://ansysproducthelpqa.win.ansys.com/account/secured?returnurl=/Views/Secured/corp/v232/en/add_beta/add_science_BETA_material_tuning_tool.html>`_.
To prevent wasted time, the steps described in the Additive documentation should be
reviewed carefully before executing the tuning process below.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default

    import ansys.additive as pyadditive

    additive = pyadditive.Additive()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    user data path: /home/runner/.local/share/ansys-pyadditive




.. GENERATED FROM PYTHON SOURCE LINES 19-32

Specify the Tuning Inputs
-------------------------
The ``MaterialTuningInput`` object contains the paths to the files needed to
tune a material. The ``experiment_data_file`` is a CSV file containing the
results of single bead experiments. The ``material_parameters_file`` is a JSON
file containing the material parameters. The ``thermal_properties_lookup_file``
is a CSV file containing the temperature dependent properties of the material.
The ``characteristic_width_lookup_file`` is an optional CSV file containing
the melt pool characteristic width at various laser powers and scan speeds.
If the characteristic width lookup file is not specified, it will be generated
during the tuning process.

Example input files can be downloaded as shown below.

.. GENERATED FROM PYTHON SOURCE LINES 32-51

.. code-block:: default


    import ansys.additive.examples as examples

    input_files = examples.download_material_tuning_input()

    # Below we include the characteristic width lookup file in order to reduce
    # processing time. If a characteristic width lookup file is not available,
    # the field can be omitted when creating the ``MaterialTuningInput`` object.
    input = pyadditive.MaterialTuningInput(
        id="custom-material-tuning",
        experiment_data_file=input_files.experiment_data_file,
        material_parameters_file=input_files.material_parameters_file,
        thermal_properties_lookup_file=input_files.thermal_properties_lookup_file,
        characteristic_width_lookup_file=input_files.characteristic_width_lookup_file,
        allowable_error=0.05,  # allowable difference, as a ratio, between experimental and simulated results
        max_iterations=10,  # maximum number of simulation iterations to perform
        base_plate_temperature=353.15,  # only used when calculating the characteristic width
    )








.. GENERATED FROM PYTHON SOURCE LINES 52-55

Perform the Material Tuning
---------------------------
Material tuning is performed using the ``tune_material`` method.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    summary = additive.tune_material(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Tuning started
    Reading existing Characteristic Width file: /tmp/additive/3f8b9c837bdf3/input/cw_lookup.csv
    Optimizing parameters
    Initializing tuned parameter file: /tmp/additive/3f8b9c837bdf3/output/Optimized_Parameters.csv
    Optimizing parameters for (Power: 270 W, Velocity: 1.035 m/s, LayerThickness: 3E-05 m, BeamDiameter: 8E-05 m, BaseplateTemperature: 150 C)
    Running thermal solver with Extinction Coefficient: 30128.205128205125, Absorptivity: 0.5
    Thermal Solver run completed
    Simulation (reference width: 0.000284725 m, reference depth: 0.00011703700000000001 m), Experimental (width: 0.0003155 m, depth: 0.000125 m)
    Running thermal solver with Extinction Coefficient: 30128.205128205125, Absorptivity: 0.5387584163232964
    Thermal Solver run completed
    Simulation (reference width: 0.00029615200000000005 m, reference depth: 0.000122122 m), Experimental (width: 0.0003155 m, depth: 0.000125 m)
    Running thermal solver with Extinction Coefficient: 30128.205128205125, Absorptivity: 0.5610999027606274
    Thermal Solver run completed
    Simulation (reference width: 0.000302633 m, reference depth: 0.00012490800000000002 m), Experimental (width: 0.0003155 m, depth: 0.000125 m)
    Writing results to results file: /tmp/additive/3f8b9c837bdf3/output/Optimized_Parameters.csv
    Tuning completed




.. GENERATED FROM PYTHON SOURCE LINES 59-65

Review the Results
------------------
The ``MaterialTuningSummary`` object contains the results of the material
tuning process. These results are used in follow-on steps to calculate the
material parameters needed by PyAdditive. See the Additive documentation
referred to above for details.

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: default


    print(summary)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MaterialTuningSummary
    input: MaterialTuningInput
    id: custom-material-tuning
    allowable_error: 0.05
    max_iterations: 10
    experiment_data_file: /home/runner/.local/share/ansys-pyadditive/examples/material_tuning_input/experiment_data.csv
    material_parameters_file: /home/runner/.local/share/ansys-pyadditive/examples/material_tuning_input/material_parameters.json
    thermal_properties_lookup_file: /home/runner/.local/share/ansys-pyadditive/examples/material_tuning_input/thermal_lookup.csv
    characteristic_width_lookup_file: /home/runner/.local/share/ansys-pyadditive/examples/material_tuning_input/characteristic_width_lookup.csv
    base_plate_temperature: 353.15

    optimized_parameters_file: /home/runner/.local/share/ansys-pyadditive/custom-material-tuning/optimized_parameters.csv
    characteristic_width_file: /home/runner/.local/share/ansys-pyadditive/examples/material_tuning_input/characteristic_width_lookup.csv
    log_file: /home/runner/.local/share/ansys-pyadditive/custom-material-tuning/log.txt






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  33.988 seconds)


.. _sphx_glr_download_examples_gallery_examples_06_advanced_custom_material_tuning.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 06_advanced_custom_material_tuning.py <06_advanced_custom_material_tuning.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 06_advanced_custom_material_tuning.ipynb <06_advanced_custom_material_tuning.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
