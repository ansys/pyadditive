
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/03_additive_thermal_history.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_03_additive_thermal_history.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_03_additive_thermal_history.py:


Thermal History Analysis
========================

This tutorial shows how you can use PyAdditive to determine
thermal history during a build using a simulated coaxial
average sensor.

Units are SI (m, kg, s, K) unless otherwise noted.

First, connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 13-17

.. code-block:: default

    import ansys.additive as pyadditive

    additive = pyadditive.Additive()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    user data path: /home/runner/.local/share/ansys-pyadditive




.. GENERATED FROM PYTHON SOURCE LINES 18-28

Model Selection
---------------
The next step is a to specify a geometry model. Currently, PyAdditive supports
two types of geometry specifications, STL files and build files. A build file
in this context is a zip archive containing an STL file describing the
geometry, a machine instruction file and zero or more STL files describing
support structures. For details of the build file see <TBD>.

Example build and STL files can be downloaded by importing the examples
module as shown below.

.. GENERATED FROM PYTHON SOURCE LINES 28-43

.. code-block:: default


    import ansys.additive.examples as examples

    # Creating an ``StlFile`` object
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    stl_name = examples.download_10mm_cube()
    stl_file = pyadditive.StlFile(stl_name)

    # Creating a ``BuildFile`` object
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    build_file_name = examples.download_small_wedge_slm_build_file()
    build_file = pyadditive.BuildFile(pyadditive.MachineType.SLM, build_file_name)








.. GENERATED FROM PYTHON SOURCE LINES 44-48

Select Material
---------------
The next step is a to choose a material. A list of available materials can
be obtained using the ``get_materials_list`` command.

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default


    print(additive.get_materials_list())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    names: "Ti64"
    names: "IN625"
    names: "CoCr"
    names: "Al357"
    names: "AlSi10Mg"
    names: "IN718"
    names: "316L"
    names: "17-4PH"





.. GENERATED FROM PYTHON SOURCE LINES 52-53

Obtain the parameters for a single material using one of the names from the list.

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    material = additive.get_material("17-4PH")








.. GENERATED FROM PYTHON SOURCE LINES 56-61

Set Machine Parameters
----------------------
Specify machine parameters by first creating an ``AdditiveMachine`` object
then assigning the desired values. All values are in SI units (m, kg, s, K)
unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default


    machine = pyadditive.AdditiveMachine()

    # Show available parameters
    print(machine)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AdditiveMachine
    laser_power: 195 W
    scan_speed: 1.0 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m





.. GENERATED FROM PYTHON SOURCE LINES 68-69

Set laser power and scan speed

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default

    machine.scan_speed = 1  # m/s
    machine.laser_power = 500  # W








.. GENERATED FROM PYTHON SOURCE LINES 73-79

Specify Thermal History Simulation Inputs
-----------------------------------------
Create a ``ThermalHistoryInput`` object containing the desired simulation
parameters. The ``ThermalHistoryInput`` object contains ``CoaxialAverageSensorInputs``.
``CoaxialAverageSensorInputs`` consist of a sensor radius and one or more ``Range``
of z heights.

.. GENERATED FROM PYTHON SOURCE LINES 79-94

.. code-block:: default


    # Values are in meters
    sensor_inputs = pyadditive.CoaxialAverageSensorInputs(
        radius=5e-4,
        z_heights=[pyadditive.Range(min=1e-3, max=1.1e-3), pyadditive.Range(min=6.5e-3, max=6.6e-3)],
    )

    input = pyadditive.ThermalHistoryInput(
        machine=machine,
        material=material,
        id="thermal-history-example",
        geometry=stl_file,
        coax_ave_sensor_inputs=sensor_inputs,
    )








.. GENERATED FROM PYTHON SOURCE LINES 95-98

Run Simulation
--------------
Use the ``simulate`` method of the ``additive`` object to run the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 98-101

.. code-block:: default


    summary = additive.simulate(input)








.. GENERATED FROM PYTHON SOURCE LINES 102-105

Plot Thermal History
--------------------
You can plot the thermal history using pyvista as shown below.

.. GENERATED FROM PYTHON SOURCE LINES 105-118

.. code-block:: default


    import glob
    import os

    import pyvista as pv

    vtk_files = glob.glob(os.path.join(summary.coax_ave_output_folder, "*.vtk"))
    for file in vtk_files:
        plotter = pv.Plotter(window_size=[512, 512])
        plotter.add_mesh(pv.read(file))
        title = os.path.splitext(os.path.basename(file))[0]
        plotter.add_title(title, font_size=8)
        plotter.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_001.png
          :alt: 03 additive thermal history
          :srcset: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_002.png
          :alt: 03 additive thermal history
          :srcset: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_002.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_003.png
          :alt: 03 additive thermal history
          :srcset: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_003.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_004.png
          :alt: 03 additive thermal history
          :srcset: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_004.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_005.png
          :alt: 03 additive thermal history
          :srcset: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_005.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_006.png
          :alt: 03 additive thermal history
          :srcset: /examples/gallery_examples/images/sphx_glr_03_additive_thermal_history_006.png
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  46.284 seconds)


.. _sphx_glr_download_examples_gallery_examples_03_additive_thermal_history.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 03_additive_thermal_history.py <03_additive_thermal_history.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 03_additive_thermal_history.ipynb <03_additive_thermal_history.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
