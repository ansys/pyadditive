
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/03_using_a_custom_material.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_03_using_a_custom_material.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_03_using_a_custom_material.py:


Using a custom material
=======================

This example shows how to use a custom material in PyAdditive simulations.
For background information and file formats, see
`Material Tuning Tool (Beta) to Create User Defined Materials
<https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/corp/v232/en/add_beta/add_science_BETA_material_tuning_tool.html?q=material%20tuning%20tool>`_
in the *Additive Manufacturing Beta Features* documentation.
To prevent wasted time, before executing this example, carefully review
the steps described in this PyAdditive documentation.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

Perform required import and connect
-----------------------------------
Perform the required import and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python


    from ansys.additive.core import Additive, AdditiveMachine, SingleBeadInput

    additive = Additive()








.. GENERATED FROM PYTHON SOURCE LINES 46-50

Download custom material
------------------------
Download an example of a custom material. Typically, you would have the
files defining your custom material stored locally.

.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: Python


    import ansys.additive.core.examples as examples

    material_files = examples.download_custom_material()








.. GENERATED FROM PYTHON SOURCE LINES 56-62

Load custom material files
--------------------------
Use the :meth:`~Additive.load_material` method on the ``additive`` object to
load custom material defnition files. The method returns an :class:`~AdditiveMaterial`
object that you can use in simulations. The :class:`~AdditiveMaterial` object
exists only in the current Python session and is not saved.

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: Python


    custom_material = additive.load_material(
        parameters_file=material_files.material_configuration_file,
        thermal_lookup_file=material_files.thermal_properties_lookup_file,
        characteristic_width_lookup_file=material_files.characteristic_width_lookup_file,
    )








.. GENERATED FROM PYTHON SOURCE LINES 70-74

Use the custom material in a simulation
---------------------------------------
Once the custom material has been loaded, you can assign it to a simulation input
object.

.. GENERATED FROM PYTHON SOURCE LINES 74-84

.. code-block:: Python


    input = SingleBeadInput(
        machine=AdditiveMachine(),
        material=custom_material,
        bead_length=0.001,  # meters
    )

    # Remove '#' to run the simulation
    # additive.simulate(input)








.. GENERATED FROM PYTHON SOURCE LINES 85-91

Add a custom material to the material library
---------------------------------------------
You can add a custom material to the material library for use in future
Python sessions. The :meth:`~Additive.add_material` method is similar to the
:meth:`~Additive.load_material` method, except that it saves the
material to the server.

.. GENERATED FROM PYTHON SOURCE LINES 91-104

.. code-block:: Python


    # show current available materials
    print(additive.materials_list())

    custom_material = additive.add_material(
        parameters_file=material_files.material_configuration_file,
        thermal_lookup_file=material_files.thermal_properties_lookup_file,
        characteristic_width_lookup_file=material_files.characteristic_width_lookup_file,
    )

    # show updated available materials
    print(additive.materials_list())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['AlSi10Mg', 'Al357', 'CoCr', 'IN718', 'IN625', '316L', '17-4PH', 'Ti64']
    ['AlSi10Mg', 'Al357', 'CoCr', 'IN718', 'IN625', '316L', '17-4PH', 'Ti64', 'Vibranium']




.. GENERATED FROM PYTHON SOURCE LINES 105-110

Remove the custom material from the material library
----------------------------------------------------
You can remove a custom material from the material library using the
:meth:`~Additive.remove_material` method. Ansys-supplied materials cannot be removed
and will raise an error if you try to remove them.

.. GENERATED FROM PYTHON SOURCE LINES 110-118

.. code-block:: Python


    # show current available materials
    print(additive.materials_list())

    additive.remove_material(custom_material.name)

    # show updated available materials
    print(additive.materials_list())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['AlSi10Mg', 'Al357', 'CoCr', 'IN718', 'IN625', '316L', '17-4PH', 'Ti64', 'Vibranium']
    ['AlSi10Mg', 'Al357', 'CoCr', 'IN718', 'IN625', '316L', '17-4PH', 'Ti64']





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.566 seconds)


.. _sphx_glr_download_examples_gallery_examples_03_using_a_custom_material.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03_using_a_custom_material.ipynb <03_using_a_custom_material.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03_using_a_custom_material.py <03_using_a_custom_material.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 03_using_a_custom_material.zip <03_using_a_custom_material.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
