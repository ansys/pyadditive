
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/04_custom_material_tuning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_04_custom_material_tuning.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_04_custom_material_tuning.py:


Custom material tuning
======================

This example shows how to tune a custom material for use with PyAdditive.
For background information and file formats, see
`Material Tuning Tool (Beta) to Create User Defined Materials
<https://ansyshelp.ansys.com/account/secured?returnurl=/Views/Secured/corp/v232/en/add_beta/add_science_BETA_material_tuning_tool.html?q=material%20tuning%20tool>`_
in the *Additive Manufacturing Beta Features* documentation.
To prevent wasted time, before executing this example, carefully review
the steps described in this PyAdditive documentation.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

Perform required import and connect
-----------------------------------
Perform the required import and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python


    from ansys.additive.core import Additive, MaterialTuningInput

    additive = Additive()








.. GENERATED FROM PYTHON SOURCE LINES 46-57

Specify tuning inputs
---------------------
The :class:`MaterialTuningInput` object contains the paths to the files needed to
tune a material. The ``experiment_data_file`` file is a CSV file containing the
results of single bead experiments. The ``material_configuration_file`` file is a JSON
file containing the material parameters. The ``thermal_properties_lookup_file``
file is a CSV file containing the temperature-dependent properties of the material.
The ``characteristic_width_lookup_file`` file is an optional CSV file containing
the melt pool characteristic width at various laser powers and scan speeds.
If the characteristic width lookup file is not specified, it is generated
during the tuning process.

.. GENERATED FROM PYTHON SOURCE LINES 57-78

.. code-block:: Python


    # Download the example input files.

    import ansys.additive.core.examples as examples

    input_files = examples.download_material_tuning_input()

    # This code includes the characteristic width lookup file to reduce
    # processing time. If a characteristic width lookup file is not available,
    # the field can be omitted when creating the MaterialTuningInput object.

    input = MaterialTuningInput(
        experiment_data_file=input_files.experiment_data_file,
        material_configuration_file=input_files.material_configuration_file,
        thermal_properties_lookup_file=input_files.thermal_properties_lookup_file,
        characteristic_width_lookup_file=input_files.characteristic_width_lookup_file,
        allowable_error=0.05,  # allowable difference, as a ratio, between experimental and simulated results
        max_iterations=10,  # maximum number of simulation iterations to perform
        base_plate_temperature=353.15,  # only used when calculating the characteristic width
    )








.. GENERATED FROM PYTHON SOURCE LINES 79-82

Perform material tuning
------------------------
Use the :meth:`~Additive.tune_material` method to perform material tuning.

.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: Python


    summary = additive.tune_material(input)








.. GENERATED FROM PYTHON SOURCE LINES 86-92

Review results
--------------
The :class:`MaterialTuningSummary` object contains the results of the material
tuning process. These results are used in follow-on steps to calculate the
material parameters needed by PyAdditive. For more information, see the
Additive documentation referred to earlier.

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python


    print(summary)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MaterialTuningSummary
    input: MaterialTuningInput
    id: tKVXk78hz7RM
    allowable_error: 0.05
    max_iterations: 10
    experiment_data_file: /home/runner/.local/share/pyadditive/examples/material_tuning_input/experiment_data.csv
    material_configuration_file: /home/runner/.local/share/pyadditive/examples/material_tuning_input/material_parameters.json
    thermal_properties_lookup_file: /home/runner/.local/share/pyadditive/examples/material_tuning_input/thermal_lookup.csv
    characteristic_width_lookup_file: /home/runner/.local/share/pyadditive/examples/material_tuning_input/characteristic_width_lookup.csv
    base_plate_temperature: 353.15

    optimized_parameters_file: /home/runner/.local/share/pyadditive/tKVXk78hz7RM/optimized_parameters.csv
    coefficients_file: None
    material_configuration_file: None
    characteristic_width_file: /home/runner/.local/share/pyadditive/examples/material_tuning_input/characteristic_width_lookup.csv
    log_file: /home/runner/.local/share/pyadditive/tKVXk78hz7RM/log.txt






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 7.807 seconds)


.. _sphx_glr_download_examples_gallery_examples_04_custom_material_tuning.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04_custom_material_tuning.ipynb <04_custom_material_tuning.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04_custom_material_tuning.py <04_custom_material_tuning.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 04_custom_material_tuning.zip <04_custom_material_tuning.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
