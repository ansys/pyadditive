
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/11_advanced_parametric_study.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_11_advanced_parametric_study.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_11_advanced_parametric_study.py:


Parametric study
================

This example shows how you can use PyAdditive to perform a parametric study.
The intended audience is a user who desires to optimize additive machine parameters
to achieve a specific result. Here, the :class:`ParametricStudy` class is used to
conduct a parametric study. While this is not required, the :class:`ParametricStudy`
class provides data management and visualization features that ease the task.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

Perform required imports and create a study
-------------------------------------------
Perform the required import and create a :class:`ParametricStudy` instance.

.. GENERATED FROM PYTHON SOURCE LINES 38-44

.. code-block:: Python

    from ansys.additive.core import Additive, SimulationStatus, SimulationType
    from ansys.additive.core.parametric_study import ColumnNames, ParametricStudy
    import ansys.additive.core.parametric_study.display as display

    study = ParametricStudy("demo-study")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saving parametric study to /home/runner/work/pyadditive/pyadditive/examples/demo-study.ps




.. GENERATED FROM PYTHON SOURCE LINES 45-50

Get the study file name
-----------------------
The current state of the parametric study is saved to a file upon each
update. You can retrieve the name of the file as shown below. This file
uses a binary format and is not human readable.

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python


    print(study.file_name)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/pyadditive/pyadditive/examples/demo-study.ps




.. GENERATED FROM PYTHON SOURCE LINES 54-59

Select a material for the study
-------------------------------
Select a material to use in the study. The material name must be known by
the Additive service. You can connect to the Additive service
and print a list of available materials prior to selecting one.

.. GENERATED FROM PYTHON SOURCE LINES 59-64

.. code-block:: Python


    additive = Additive()
    print("Available material names: {}".format(additive.materials_list()))
    material = "IN718"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    user data path: /home/runner/.local/share/pyadditive
    Available material names: ['Ti64', 'IN718', '17-4PH', 'IN625', '316L', 'AlSi10Mg', 'CoCr', 'Al357']




.. GENERATED FROM PYTHON SOURCE LINES 65-75

Create a single bead evaluation
-------------------------------
Parametric studies often start with single bead simulations in order to
determine melt pool statistics. Here, the
:meth:`~ParametricStudy.generate_single_bead_permutations` method is used to
generate single bead simulation permutations. The parameters
for the :meth:`~ParametricStudy.generate_single_bead_permutations` method allow you to
specify a range of machine parameters and filter them by energy density. Not all
the parameters shown are required. Optional parameters that are not specified
use default values defined in the :class:`MachineConstants` class.

.. GENERATED FROM PYTHON SOURCE LINES 75-106

.. code-block:: Python

    import numpy as np

    # Specify a range of laser powers. Valid values are 50 to 700 W.
    initial_powers = np.linspace(50, 700, 7)
    # Specify a range of laser scan speeds. Valid values are 0.35 to 2.5 m/s.
    initial_scan_speeds = np.linspace(0.35, 2.5, 5)
    # Specify powder layer thicknesses. Valid values are 10e-6 to 100e-6 m.
    initial_layer_thicknesses = [40e-6, 50e-6]
    # Specify laser beam diameters. Valid values are 20e-6 to 140e-6 m.
    initial_beam_diameters = [80e-6]
    # Specify heater temperatures. Valid values are 20 - 500 C.
    initial_heater_temps = [80]
    # Restrict the permutations within a range of energy densities
    # For single bead, the energy density is laser power / (laser scan speed * layer thickness).
    min_energy_density = 2e6
    max_energy_density = 8e6
    # Specify a bead length in meters.
    bead_length = 0.001

    study.generate_single_bead_permutations(
        material_name=material,
        bead_length=bead_length,
        laser_powers=initial_powers,
        scan_speeds=initial_scan_speeds,
        layer_thicknesses=initial_layer_thicknesses,
        beam_diameters=initial_beam_diameters,
        heater_temperatures=initial_heater_temps,
        min_area_energy_density=min_energy_density,
        max_area_energy_density=max_energy_density,
    )








.. GENERATED FROM PYTHON SOURCE LINES 107-111

Show the simulations as a table
-------------------------------
You can use the :obj:`display <ansys.additive.core.parametric_study.display>`
package to list the simulations as a table.

.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: Python


    display.show_table(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_001.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    show_table



.. GENERATED FROM PYTHON SOURCE LINES 115-123

Skip some simulations
---------------------
If you are working with a large parametric study, you may want to skip some
simulations to reduce processing time. To do so, set the simulation status
to :obj:`SimulationStatus.SKIP` which is defined in the :class:`SimulationStatus`
class. Here, a :class:`~pandas.DataFrame` object is obtained, a filter is
applied to get a list of simulation IDs, and then the status is updated on the
simulations with those IDs.

.. GENERATED FROM PYTHON SOURCE LINES 123-133

.. code-block:: Python


    df = study.data_frame()
    # Get IDs for single bead simulations with laser power below 75 W.
    ids = df.loc[
        (df[ColumnNames.LASER_POWER] < 75) & (df[ColumnNames.TYPE] == SimulationType.SINGLE_BEAD),
        ColumnNames.ID,
    ].tolist()
    study.set_status(ids, SimulationStatus.SKIP)
    display.show_table(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_002.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    show_table



.. GENERATED FROM PYTHON SOURCE LINES 134-138

Run single bead simulations
---------------------------
Run the simulations using the :meth:`~ParametricStudy.run_simulations` method. All simulations
with a :obj:`SimulationStatus.PENDING` status are executed.

.. GENERATED FROM PYTHON SOURCE LINES 138-141

.. code-block:: Python


    study.run_simulations(additive)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-02-04 19:28:26 Completed 0 of 31 simulations    2025-02-04 19:28:47 Completed 1 of 31 simulations    2025-02-04 19:29:01 Completed 2 of 31 simulations    2025-02-04 19:29:12 Completed 3 of 31 simulations    2025-02-04 19:29:24 Completed 4 of 31 simulations    2025-02-04 19:29:37 Completed 5 of 31 simulations    2025-02-04 19:29:50 Completed 6 of 31 simulations    2025-02-04 19:30:01 Completed 7 of 31 simulations    2025-02-04 19:30:13 Completed 8 of 31 simulations    2025-02-04 19:30:26 Completed 9 of 31 simulations    2025-02-04 19:30:38 Completed 10 of 31 simulations    2025-02-04 19:30:53 Completed 11 of 31 simulations    2025-02-04 19:31:05 Completed 12 of 31 simulations    2025-02-04 19:31:17 Completed 13 of 31 simulations    2025-02-04 19:31:30 Completed 14 of 31 simulations    2025-02-04 19:31:41 Completed 15 of 31 simulations    2025-02-04 19:31:54 Completed 16 of 31 simulations    2025-02-04 19:32:10 Completed 17 of 31 simulations    2025-02-04 19:32:21 Completed 18 of 31 simulations    2025-02-04 19:32:32 Completed 19 of 31 simulations    2025-02-04 19:32:46 Completed 20 of 31 simulations    2025-02-04 19:32:58 Completed 21 of 31 simulations    2025-02-04 19:33:13 Completed 22 of 31 simulations    2025-02-04 19:33:28 Completed 23 of 31 simulations    2025-02-04 19:33:52 Completed 24 of 31 simulations    2025-02-04 19:34:13 Completed 25 of 31 simulations    2025-02-04 19:34:25 Completed 26 of 31 simulations    2025-02-04 19:34:40 Completed 27 of 31 simulations    2025-02-04 19:34:55 Completed 28 of 31 simulations    2025-02-04 19:35:18 Completed 29 of 31 simulations    2025-02-04 19:35:33 Completed 30 of 31 simulations    2025-02-04 19:35:45 Completed 31 of 31 simulations




.. GENERATED FROM PYTHON SOURCE LINES 142-146

Save the study to a CSV file
----------------------------
The parametric study is saved with each update in a binary format.
For other formats, use the ``to_*`` methods provided by the :class:`~pandas.DataFrame` class.

.. GENERATED FROM PYTHON SOURCE LINES 146-149

.. code-block:: Python


    study.data_frame().to_csv("demo-study.csv")








.. GENERATED FROM PYTHON SOURCE LINES 150-154

Load a previously saved study
-----------------------------
Load a previously saved study using the static
:meth:`ParameticStudy.load() <ParametricStudy.load>` method.

.. GENERATED FROM PYTHON SOURCE LINES 154-158

.. code-block:: Python


    study2 = ParametricStudy.load("demo-study.ps")
    display.show_table(study2)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_003.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    show_table



.. GENERATED FROM PYTHON SOURCE LINES 159-163

Plot single bead results
------------------------
Plot the single bead results using the
:func:`~ansys.additive.core.parametric_study.display.single_bead_eval_plot` method.

.. GENERATED FROM PYTHON SOURCE LINES 163-166

.. code-block:: Python


    display.single_bead_eval_plot(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_004.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    single_bead_eval_plot



.. GENERATED FROM PYTHON SOURCE LINES 167-179

Create a porosity evaluation
----------------------------
You can use the insights gained from the single bead evaluation to
generate parameters for a porosity evaluation. Alternatively, you can
perform a porosity evaluation without a previous single bead evaluation.
Here, the laser power and scan speeds are determined by filtering the
single bead results where the ratio of the melt pool reference depth
to reference width is within a specified range. Additionally, the simulations
are restricted to a minimum build rate, which is calculated as
scan speed * layer thickness * hatch spacing. The
:meth:`~ParametricStudy.generate_porosity_permutations` method is used to add
porosity simulations to the study.

.. GENERATED FROM PYTHON SOURCE LINES 179-203

.. code-block:: Python


    df = study.data_frame()
    df = df[
        (df[ColumnNames.MELT_POOL_REFERENCE_DEPTH_OVER_WIDTH] >= 0.3)
        & (df[ColumnNames.MELT_POOL_REFERENCE_DEPTH_OVER_WIDTH] <= 0.65)
    ]

    study.generate_porosity_permutations(
        material_name=material,
        laser_powers=df[ColumnNames.LASER_POWER].unique(),
        scan_speeds=df[ColumnNames.SCAN_SPEED].unique(),
        size_x=1e-3,
        size_y=1e-3,
        size_z=1e-3,
        layer_thicknesses=[40e-6],
        heater_temperatures=[80],
        beam_diameters=[80e-6],
        start_angles=[45],
        rotation_angles=[67.5],
        hatch_spacings=[100e-6],
        min_build_rate=5e-9,
        iteration=1,
    )








.. GENERATED FROM PYTHON SOURCE LINES 204-207

Run porosity simulations
------------------------
Run the simulations using the :meth:`~ParametricStudy.run_simulations` method.

.. GENERATED FROM PYTHON SOURCE LINES 207-210

.. code-block:: Python


    study.run_simulations(additive)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-02-04 19:35:52 Completed 0 of 15 simulations    2025-02-04 19:36:42 Completed 1 of 15 simulations    2025-02-04 19:37:19 Completed 2 of 15 simulations    2025-02-04 19:37:51 Completed 3 of 15 simulations    2025-02-04 19:38:47 Completed 4 of 15 simulations    2025-02-04 19:39:26 Completed 5 of 15 simulations    2025-02-04 19:39:58 Completed 6 of 15 simulations    2025-02-04 19:41:08 Completed 7 of 15 simulations    2025-02-04 19:41:52 Completed 8 of 15 simulations    2025-02-04 19:42:25 Completed 9 of 15 simulations    2025-02-04 19:44:27 Completed 10 of 15 simulations    2025-02-04 19:45:16 Completed 11 of 15 simulations    2025-02-04 19:45:52 Completed 12 of 15 simulations    2025-02-04 19:48:52 Completed 13 of 15 simulations    2025-02-04 19:50:03 Completed 14 of 15 simulations    2025-02-04 19:50:43 Completed 15 of 15 simulations




.. GENERATED FROM PYTHON SOURCE LINES 211-215

Plot porosity results
---------------------
Plot the porosity simulation results using the
:func:`~ansys.additive.core.parametric_study.display.porosity_contour_plot` method.

.. GENERATED FROM PYTHON SOURCE LINES 215-218

.. code-block:: Python


    display.porosity_contour_plot(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_005.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    porosity_contour_plot



.. GENERATED FROM PYTHON SOURCE LINES 219-227

Create a microstructure evaluation
----------------------------------
Here a set of microstructure simulations is generated using many of the same
parameters used for the porosity simulations. The parameters ``cooling_rate``,
``thermal_gradient``, ``melt_pool_width``, and ``melt_pool_depth`` are not
specified so they are calculated. The
:meth:`~ParametricStudy.generate_microstructure_permutations` method is used to add
microstructure simulations to the study.

.. GENERATED FROM PYTHON SOURCE LINES 227-248

.. code-block:: Python


    df = study.data_frame()
    df = df[(df[ColumnNames.TYPE] == SimulationType.POROSITY)]

    study.generate_microstructure_permutations(
        material_name=material,
        laser_powers=df[ColumnNames.LASER_POWER].unique(),
        scan_speeds=df[ColumnNames.SCAN_SPEED].unique(),
        size_x=1e-3,
        size_y=1e-3,
        size_z=1.1e-3,
        sensor_dimension=1e-4,
        layer_thicknesses=df[ColumnNames.LAYER_THICKNESS].unique(),
        heater_temperatures=df[ColumnNames.HEATER_TEMPERATURE].unique(),
        beam_diameters=df[ColumnNames.BEAM_DIAMETER].unique(),
        start_angles=df[ColumnNames.START_ANGLE].unique(),
        rotation_angles=df[ColumnNames.ROTATION_ANGLE].unique(),
        hatch_spacings=df[ColumnNames.HATCH_SPACING].unique(),
        iteration=2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 249-252

Run microstructure simulations
------------------------------
Run the simulations using the :meth:`~ParametricStudy.run_simulations` method.

.. GENERATED FROM PYTHON SOURCE LINES 252-255

.. code-block:: Python


    study.run_simulations(additive)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-02-04 19:50:53 Completed 0 of 15 simulations    2025-02-04 19:53:07 Completed 1 of 15 simulations    2025-02-04 19:54:51 Completed 2 of 15 simulations    2025-02-04 19:56:17 Completed 3 of 15 simulations    2025-02-04 19:58:33 Completed 4 of 15 simulations    2025-02-04 20:00:19 Completed 5 of 15 simulations    2025-02-04 20:01:46 Completed 6 of 15 simulations    2025-02-04 20:04:07 Completed 7 of 15 simulations    2025-02-04 20:05:53 Completed 8 of 15 simulations    2025-02-04 20:07:23 Completed 9 of 15 simulations    2025-02-04 20:09:44 Completed 10 of 15 simulations    2025-02-04 20:11:35 Completed 11 of 15 simulations    2025-02-04 20:13:06 Completed 12 of 15 simulations    2025-02-04 20:15:29 Completed 13 of 15 simulations    2025-02-04 20:17:20 Completed 14 of 15 simulations    2025-02-04 20:18:52 Completed 15 of 15 simulations




.. GENERATED FROM PYTHON SOURCE LINES 256-261

Plot microstructure results
---------------------------
Plot and compare the average grain sizes from the microstructure simulations
using the :func:`~ansys.additive.core.parametric_study.display.ave_grain_size_plot`
method.

.. GENERATED FROM PYTHON SOURCE LINES 261-263

.. code-block:: Python


    display.ave_grain_size_plot(study)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Row(sizing_mode='stretch_both')
        [0] Column(width=200)
            [0] Select(name='Layer Thickness', options={'40 µm': 4e-05}, sizing_mode='stretch_width', value=4e-05)
            [1] Select(name='Heater Temperature', options={'80.00 °C': 80}, sizing_mode='stretch_width', value=80)
            [2] Select(name='Beam Diameter', options={'80 µm': 8e-05}, sizing_mode='stretch_width', value=8e-05)
            [3] Select(name='Start Angle', options={'45.0 °': 45}, sizing_mode='stretch_width', value=45)
            [4] Select(name='Rotation Angle', options={'67.5 °': 67.5}, sizing_mode='stretch_width', value=67.5)
            [5] Select(name='Hatch Spacing', options={'100 µm': 0.0001}, sizing_mode='stretch_width', value=0.0001)
            [6] Select(name='Stripe Width', options={'10 mm': 0.01}, sizing_mode='stretch_width', value=0.01)
        [1] Plotly(Figure, min_height=600, sizing_mode='stretch_both')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (51 minutes 3.992 seconds)


.. _sphx_glr_download_examples_gallery_examples_11_advanced_parametric_study.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 11_advanced_parametric_study.ipynb <11_advanced_parametric_study.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 11_advanced_parametric_study.py <11_advanced_parametric_study.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
