
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00_additive_single_bead.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00_additive_single_bead.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00_additive_single_bead.py:


Single bead analysis
====================

This example shows how you can use PyAdditive to determine
melt pool characteristics for a given material and machine
parameter combinations.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

Perform required imports and connect
------------------------------------
Perform the required imports and connect to the Additive service.

.. GENERATED FROM PYTHON SOURCE LINES 36-49

.. code-block:: default


    import matplotlib.pyplot as plt

    from ansys.additive.core import (
        Additive,
        AdditiveMachine,
        MeltPoolColumnNames,
        SimulationError,
        SingleBeadInput,
    )

    additive = Additive()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-11-13 20:54:20 Connected to localhost:50052
    user data path: /home/runner/.local/share/pyadditive




.. GENERATED FROM PYTHON SOURCE LINES 50-53

Get server connection information
---------------------------------
Get server connection information using the :meth:`about() <Additive.about>` method.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    additive.about()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Client 0.16.0, API version: 1.4.1
    _servers not None
    ServerConnectionStatus(connected=True, channel_str='localhost:50052', metadata={'Version': '24.1.0-alpha10', 'API version': '1.4.1'})




.. GENERATED FROM PYTHON SOURCE LINES 57-62

Select material
---------------
Select a material. You can use the
:meth:`materials_list() <ansys.additive.core.additive.Additive.materials_list>`
method to obtain a list of available materials.

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default


    additive.materials_list()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['316L', 'IN625', 'IN718', '17-4PH', 'Ti64', 'Al357', 'AlSi10Mg', 'CoCr']



.. GENERATED FROM PYTHON SOURCE LINES 66-70

You can obtain the parameters for a single material by passing a name
from the materials list to the
:meth:`material() <ansys.additive.core.additive.Additive.material>`
method.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default


    material = additive.material("17-4PH")








.. GENERATED FROM PYTHON SOURCE LINES 74-80

Specify machine parameters
--------------------------
Specify machine parameters by first creating an
:class:`AdditiveMachine <ansys.additive.core.machine.AdditiveMachine>` object
then assigning the desired values. All values are in SI units (m, kg, s, K)
unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: default


    machine = AdditiveMachine()

    # Show available parameters
    print(machine)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    AdditiveMachine
    laser_power: 195 W
    scan_speed: 1.0 m/s
    heater_temperature: 80 °C
    layer_thickness: 5e-05 m
    beam_diameter: 0.0001 m
    starting_layer_angle: 57 °
    layer_rotation_angle: 67 °
    hatch_spacing: 0.0001 m
    slicing_stripe_width: 0.01 m





.. GENERATED FROM PYTHON SOURCE LINES 87-90

Set laser power and scan speed
------------------------------
Set the laser power and scan speed.

.. GENERATED FROM PYTHON SOURCE LINES 90-94

.. code-block:: default


    machine.scan_speed = 1  # m/s
    machine.laser_power = 300  # W








.. GENERATED FROM PYTHON SOURCE LINES 95-99

Specify inputs for single bead simulation
-----------------------------------------
Create a :class:`SingleBeadInput <ansys.additive.core.single_bead.SingleBeadInput>`
object containing the desired simulation parameters.

.. GENERATED FROM PYTHON SOURCE LINES 99-104

.. code-block:: default


    input = SingleBeadInput(
        machine=machine, material=material, id="single-bead-example", bead_length=0.0012  # meters
    )








.. GENERATED FROM PYTHON SOURCE LINES 105-113

Run simulation
--------------
Use the :meth:`simulate() <ansys.additive.core.additive.Additive.simulate>`
method of the ``additive`` object to run the simulation. The returned object is a
either a :class:`SingleBeadSummary <ansys.additive.core.single_bead.SingleBeadSummary>`
object containing the input and a
:class:`MeltPool <ansys.additive.core.single_bead.MeltPool>` or a
:class:`SimulationError <ansys.additive.core.simulation.SimulationError>`.

.. GENERATED FROM PYTHON SOURCE LINES 113-118

.. code-block:: default


    summary = additive.simulate(input)
    if isinstance(summary, SimulationError):
        raise Exception(summary.message)








.. GENERATED FROM PYTHON SOURCE LINES 119-126

Plot melt pool statistics
-------------------------
Obtain a :class:`Pandas DataFrame <pandas.DataFrame>` containing the melt pool
statistics by using the :meth:`data_frame() <ansys.additive.core.single_bead.MeltPool.data_frame>`
property of the ``melt_pool`` attribute of the ``summary`` object. Use the
:meth:`DataFrame.plot() <pandas.DataFrame.plot>` method to plot the melt
pool dimensions as a function of bead length.

.. GENERATED FROM PYTHON SOURCE LINES 126-145

.. code-block:: default


    df = summary.melt_pool.data_frame().multiply(1e6)  # convert from meters to microns
    df.index *= 1e3  # convert bead length from meters to millimeters

    df.plot(
        y=[
            MeltPoolColumnNames.LENGTH,
            MeltPoolColumnNames.WIDTH,
            MeltPoolColumnNames.DEPTH,
            MeltPoolColumnNames.REFERENCE_WIDTH,
            MeltPoolColumnNames.REFERENCE_DEPTH,
        ],
        ylabel="Melt Pool Dimensions (µm)",
        xlabel="Bead Length (mm)",
        title="Melt Pool Dimensions vs Bead Length",
    )
    plt.show()





.. image-sg:: /examples/gallery_examples/images/sphx_glr_00_additive_single_bead_001.png
   :alt: Melt Pool Dimensions vs Bead Length
   :srcset: /examples/gallery_examples/images/sphx_glr_00_additive_single_bead_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-151

List melt pool statistics
-------------------------
You can show a table of the melt pool statistics by typing the name of the
data frame object and pressing enter. For brevity, the following code
uses ``head()`` so that only the first few rows are shown.

.. GENERATED FROM PYTHON SOURCE LINES 151-156

.. code-block:: default


    df.head()

    # .. note::
    #    If running this example as a Python script, no output is shown.





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>length</th>
          <th>width</th>
          <th>depth</th>
          <th>reference_width</th>
          <th>reference_depth</th>
        </tr>
        <tr>
          <th>bead_length</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.00</th>
          <td>87.645903</td>
          <td>89.034803</td>
          <td>28.723801</td>
          <td>0.000000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>0.02</th>
          <td>118.643001</td>
          <td>110.632002</td>
          <td>54.162100</td>
          <td>20.381600</td>
          <td>4.162110</td>
        </tr>
        <tr>
          <th>0.04</th>
          <td>137.632996</td>
          <td>121.141002</td>
          <td>82.130499</td>
          <td>56.823101</td>
          <td>32.130498</td>
        </tr>
        <tr>
          <th>0.06</th>
          <td>158.897996</td>
          <td>127.863005</td>
          <td>105.452001</td>
          <td>72.039597</td>
          <td>55.452000</td>
        </tr>
        <tr>
          <th>0.08</th>
          <td>178.035006</td>
          <td>132.889003</td>
          <td>118.868001</td>
          <td>80.923997</td>
          <td>68.868198</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 157-161

Save melt pool statistics
-------------------------
Save the melt pool statistics to a CSV file using the
:meth:`to_csv() <pandas.DataFrame.to_csv>` method.

.. GENERATED FROM PYTHON SOURCE LINES 161-163

.. code-block:: default


    df.to_csv("melt_pool.csv")








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 26.820 seconds)


.. _sphx_glr_download_examples_gallery_examples_00_additive_single_bead.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00_additive_single_bead.py <00_additive_single_bead.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00_additive_single_bead.ipynb <00_additive_single_bead.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
