
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/11_advanced_parametric_study.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_11_advanced_parametric_study.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_11_advanced_parametric_study.py:


Parametric study
================

This example shows how you can use PyAdditive to perform a parametric study.
The intended audience is a user who desires to optimize additive machine parameters
to achieve a specific result. Here, the ``ParametricStudy`` class is used to
conduct a parametric study. This is not required but ``ParametricStudy``
provides data management and visualization features which ease the task.

Units are SI (m, kg, s, K) unless otherwise noted.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

Perform required imports and create a study
-------------------------------------------
Perform the required import and create a ``ParametricStudy``.

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: default

    import numpy as np

    from ansys.additive.core import Additive, SimulationStatus, SimulationType
    from ansys.additive.core.parametric_study import ColumnNames, ParametricStudy
    import ansys.additive.core.parametric_study.display as display

    study = ParametricStudy("demo-study")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saving parametric study to /home/runner/work/pyadditive/pyadditive/examples/demo-study.ps




.. GENERATED FROM PYTHON SOURCE LINES 47-52

Get the study file name
-----------------------
The current state of the parametric study is saved to a file upon each
update. You can retrieve the name of the file as shown below. This file
uses a binary format and is not human readable.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    print(study.file_name)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/pyadditive/pyadditive/examples/demo-study.ps




.. GENERATED FROM PYTHON SOURCE LINES 56-61

Select a material for the study
-------------------------------
Select a material to use in the study. The material name must be known by
the Additive service. You can connect to the Additive service
and print a list of available materials prior to selecting one.

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default


    additive = Additive()
    print(additive.get_materials_list())
    material = "IN718"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    user data path: /home/runner/.local/share/ansys-pyadditive
    names: "AlSi10Mg"
    names: "CoCr"
    names: "Ti64"
    names: "Al357"
    names: "IN625"
    names: "316L"
    names: "IN718"
    names: "17-4PH"





.. GENERATED FROM PYTHON SOURCE LINES 67-76

Create a single bead evaluation
-------------------------------
Parametric studies often start with single bead simulations in order to
determine melt pool statistics. Here, the ``generate_single_bead_permutations()``
method is used to generate single bead simulation permutations. The parameters
for ``generate_single_bead_permutations()`` allow you to specify a range of
machine parameters and filter them by energy density. Not all the parameters
shown are required. Optional parameters that are not specified will use default
values defined in the ``MachineConstants`` class.

.. GENERATED FROM PYTHON SOURCE LINES 76-106

.. code-block:: default


    # Specify a range of laser powers. Valid values are 50 to 700 W.
    initial_powers = np.linspace(50, 700, 7)
    # Specify a range of laser scan speeds. Valid values are 0.35 to 2.5 m/s.
    initial_scan_speeds = np.linspace(0.35, 2.5, 5)
    # Specify powder layer thicknesses. Valid values are 10e-6 to 100e-6 m.
    initial_layer_thicknesses = [40e-6, 50e-6]
    # Specify laser beam diameters. Valid values are 20e-6 to 140e-6 m.
    initial_beam_diameters = [80e-6]
    # Specify heater temperatures. Valid values are 20 - 500 C.
    initial_heater_temps = [80]
    # Restrict the permutations within a range of energy densities
    # For single bead, the energy density is laser power / (laser scan speed * layer thickness).
    min_energy_density = 2e6
    max_energy_density = 8e6
    # Specify a bead length in meters.
    bead_length = 0.001

    study.generate_single_bead_permutations(
        material_name=material,
        bead_length=bead_length,
        laser_powers=initial_powers,
        scan_speeds=initial_scan_speeds,
        layer_thicknesses=initial_layer_thicknesses,
        beam_diameters=initial_beam_diameters,
        heater_temperatures=initial_heater_temps,
        min_area_energy_density=min_energy_density,
        max_area_energy_density=max_energy_density,
    )








.. GENERATED FROM PYTHON SOURCE LINES 107-111

Show the simulations as a table
-------------------------------
You can use the ``display`` module of ``ParametricStudy`` to list the simulations
as a table.

.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: default


    display.show_table(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_001.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    show_table



.. GENERATED FROM PYTHON SOURCE LINES 115-123

Skip some simulations
---------------------
If you a working with a large parametric study, you may want to skip some
simulations to reduce processing time. To do so, set the simulation status
to ``SimulationStatus.SKIP`` which is defined in the ``SimulationStatus``
class. Here, a ``Pandas DataFrame`` is obtained, a filter is
applied to get a list of simulation IDs, then the status is updated on the
simulations with those IDs.

.. GENERATED FROM PYTHON SOURCE LINES 123-133

.. code-block:: default


    df = study.data_frame()
    # Get IDs for single bead simulations with laser power below 75 W.
    ids = df.loc[
        (df[ColumnNames.LASER_POWER] < 75) & (df[ColumnNames.TYPE] == SimulationType.SINGLE_BEAD),
        ColumnNames.ID,
    ].tolist()
    study.set_status(ids, SimulationStatus.SKIP)
    display.show_table(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_002.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    show_table



.. GENERATED FROM PYTHON SOURCE LINES 134-138

Run single bead simulations
---------------------------
Run the simulations using ``run_simulations()``. All simulations with status
``SimulationStatus.PENDING`` will be executed.

.. GENERATED FROM PYTHON SOURCE LINES 138-141

.. code-block:: default


    study.run_simulations(additive)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-10-09 16:46:43 Completed 0 of 31 simulations    2023-10-09 16:47:12 Completed 1 of 31 simulations    2023-10-09 16:47:12 Completed 2 of 31 simulations    2023-10-09 16:47:16 Completed 3 of 31 simulations    2023-10-09 16:47:39 Completed 4 of 31 simulations    2023-10-09 16:47:45 Completed 5 of 31 simulations    2023-10-09 16:47:47 Completed 6 of 31 simulations    2023-10-09 16:47:48 Completed 7 of 31 simulations    2023-10-09 16:48:04 Completed 8 of 31 simulations    2023-10-09 16:48:15 Completed 9 of 31 simulations    2023-10-09 16:48:20 Completed 10 of 31 simulations    2023-10-09 16:48:29 Completed 11 of 31 simulations    2023-10-09 16:48:32 Completed 12 of 31 simulations    2023-10-09 16:48:43 Completed 13 of 31 simulations    2023-10-09 16:48:54 Completed 14 of 31 simulations    2023-10-09 16:48:57 Completed 15 of 31 simulations    2023-10-09 16:49:03 Completed 16 of 31 simulations    2023-10-09 16:49:21 Completed 17 of 31 simulations    2023-10-09 16:49:24 Completed 18 of 31 simulations    2023-10-09 16:49:25 Completed 19 of 31 simulations    2023-10-09 16:49:34 Completed 20 of 31 simulations    2023-10-09 16:49:52 Completed 21 of 31 simulations    2023-10-09 16:50:04 Completed 22 of 31 simulations    2023-10-09 16:50:06 Completed 23 of 31 simulations    2023-10-09 16:50:39 Completed 24 of 31 simulations    2023-10-09 16:50:40 Completed 25 of 31 simulations    2023-10-09 16:50:48 Completed 26 of 31 simulations    2023-10-09 16:50:52 Completed 27 of 31 simulations    2023-10-09 16:51:18 Completed 28 of 31 simulations    2023-10-09 16:51:23 Completed 29 of 31 simulations    2023-10-09 16:51:26 Completed 30 of 31 simulations    2023-10-09 16:51:30 Completed 31 of 31 simulations




.. GENERATED FROM PYTHON SOURCE LINES 142-147

Save the study to a CSV file
----------------------------
The parametric study is saved with each update in a binary format.
For other formats, use the ``to_*`` methods provided by
``Pandas DataFrame``.

.. GENERATED FROM PYTHON SOURCE LINES 147-150

.. code-block:: default


    study.data_frame().to_csv("demo-study.csv")








.. GENERATED FROM PYTHON SOURCE LINES 151-154

Load a previously saved study
-----------------------------
Load a previously saved study using the static method ``ParameticStudy.load()``.

.. GENERATED FROM PYTHON SOURCE LINES 154-158

.. code-block:: default


    study2 = ParametricStudy.load("demo-study.ps")
    display.show_table(study2)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_003.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    show_table



.. GENERATED FROM PYTHON SOURCE LINES 159-162

Plot single bead results
------------------------
Plot the single bead results.

.. GENERATED FROM PYTHON SOURCE LINES 162-165

.. code-block:: default


    display.single_bead_eval_plot(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_004.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    single_bead_eval_plot



.. GENERATED FROM PYTHON SOURCE LINES 166-176

Create a porosity evaluation
----------------------------
You can use the insights gained from the single bead evaluation to
generate parameters for a porosity evaluation. Alternatively, you can
perform a porosity evaluation without a previous single bead evaluation.
Here, the laser power and scan speeds are determined by filtering the
single bead results where the ratio of the melt pool reference depth
to reference width is within a specified range. Additionally, the simulations
are restricted to a minimum build rate, which is calculated as
scan speed * layer thickness * hatch spacing.

.. GENERATED FROM PYTHON SOURCE LINES 176-200

.. code-block:: default


    df = study.data_frame()
    df = df[
        (df[ColumnNames.MELT_POOL_REFERENCE_DEPTH_OVER_WIDTH] >= 0.3)
        & (df[ColumnNames.MELT_POOL_REFERENCE_DEPTH_OVER_WIDTH] <= 0.65)
    ]

    study.generate_porosity_permutations(
        material_name=material,
        laser_powers=df[ColumnNames.LASER_POWER].unique(),
        scan_speeds=df[ColumnNames.SCAN_SPEED].unique(),
        size_x=1e-3,
        size_y=1e-3,
        size_z=1e-3,
        layer_thicknesses=[40e-6],
        heater_temperatures=[80],
        beam_diameters=[80e-6],
        start_angles=[45],
        rotation_angles=[67.5],
        hatch_spacings=[100e-6],
        min_build_rate=5e-9,
        iteration=1,
    )








.. GENERATED FROM PYTHON SOURCE LINES 201-204

Run porosity simulations
------------------------
Run the simulations using ``run_simulations()``.

.. GENERATED FROM PYTHON SOURCE LINES 204-207

.. code-block:: default


    study.run_simulations(additive)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-10-09 16:51:33 Completed 0 of 15 simulations    2023-10-09 16:53:30 Completed 1 of 15 simulations    2023-10-09 16:53:46 Completed 2 of 15 simulations    2023-10-09 16:54:43 Completed 3 of 15 simulations    2023-10-09 16:55:33 Completed 4 of 15 simulations    2023-10-09 16:55:34 Completed 5 of 15 simulations    2023-10-09 16:55:49 Completed 6 of 15 simulations    2023-10-09 16:57:59 Completed 7 of 15 simulations    2023-10-09 16:58:27 Completed 8 of 15 simulations    2023-10-09 17:00:58 Completed 9 of 15 simulations    2023-10-09 17:01:04 Completed 10 of 15 simulations    2023-10-09 17:01:57 Completed 11 of 15 simulations    2023-10-09 17:05:01 Completed 12 of 15 simulations    2023-10-09 17:06:57 Completed 13 of 15 simulations    2023-10-09 17:07:00 Completed 14 of 15 simulations    2023-10-09 17:08:34 Completed 15 of 15 simulations




.. GENERATED FROM PYTHON SOURCE LINES 208-211

Plot porosity results
---------------------
Plot the porosity simulation results.

.. GENERATED FROM PYTHON SOURCE LINES 211-214

.. code-block:: default


    display.porosity_contour_plot(study)




.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_005.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    porosity_contour_plot



.. GENERATED FROM PYTHON SOURCE LINES 215-221

Create a microstructure evaluation
----------------------------------
Here a set of microstructure simulations is generated using many of the same
parameters used for the porosity simulations. The parameters ``cooling_rate``,
``thermal_gradient``, ``melt_pool_width``, and ``melt_pool_depth`` are not
specified so they will be calculated.

.. GENERATED FROM PYTHON SOURCE LINES 221-242

.. code-block:: default


    df = study.data_frame()
    df = df[(df[ColumnNames.TYPE] == SimulationType.POROSITY)]

    study.generate_microstructure_permutations(
        material_name=material,
        laser_powers=df[ColumnNames.LASER_POWER].unique(),
        scan_speeds=df[ColumnNames.SCAN_SPEED].unique(),
        size_x=1e-3,
        size_y=1e-3,
        size_z=1.1e-3,
        sensor_dimension=1e-4,
        layer_thicknesses=df[ColumnNames.LAYER_THICKNESS].unique(),
        heater_temperatures=df[ColumnNames.HEATER_TEMPERATURE].unique(),
        beam_diameters=df[ColumnNames.BEAM_DIAMETER].unique(),
        start_angles=df[ColumnNames.START_ANGLE].unique(),
        rotation_angles=df[ColumnNames.ROTATION_ANGLE].unique(),
        hatch_spacings=df[ColumnNames.HATCH_SPACING].unique(),
        iteration=2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 243-246

Run microstructure simulations
------------------------------
Run the simulations.

.. GENERATED FROM PYTHON SOURCE LINES 246-249

.. code-block:: default


    study.run_simulations(additive)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-10-09 17:08:36 Completed 0 of 15 simulations    2023-10-09 17:13:11 Completed 1 of 15 simulations    2023-10-09 17:13:58 Completed 2 of 15 simulations    2023-10-09 17:15:50 Completed 3 of 15 simulations    2023-10-09 17:16:30 Completed 4 of 15 simulations    2023-10-09 17:18:33 Completed 5 of 15 simulations    2023-10-09 17:18:44 Completed 6 of 15 simulations    2023-10-09 17:23:33 Completed 7 of 15 simulations    2023-10-09 17:23:41 Completed 8 of 15 simulations    2023-10-09 17:24:14 Completed 9 of 15 simulations    2023-10-09 17:28:16 Completed 10 of 15 simulations    2023-10-09 17:28:54 Completed 11 of 15 simulations    2023-10-09 17:30:19 Completed 12 of 15 simulations    2023-10-09 17:32:48 Completed 13 of 15 simulations    2023-10-09 17:32:51 Completed 14 of 15 simulations    2023-10-09 17:32:56 Completed 15 of 15 simulations




.. GENERATED FROM PYTHON SOURCE LINES 250-253

Plot microstructure results
---------------------------
Plot the average grain size from the microstructure simulation results.

.. GENERATED FROM PYTHON SOURCE LINES 253-255

.. code-block:: default


    display.ave_grain_size_plot(study)



.. image-sg:: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_006.png
   :alt: 11 advanced parametric study
   :srcset: /examples/gallery_examples/images/sphx_glr_11_advanced_parametric_study_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ave_grain_size_plot




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (46 minutes 47.096 seconds)


.. _sphx_glr_download_examples_gallery_examples_11_advanced_parametric_study.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 11_advanced_parametric_study.py <11_advanced_parametric_study.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 11_advanced_parametric_study.ipynb <11_advanced_parametric_study.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
